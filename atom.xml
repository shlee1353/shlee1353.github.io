<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ryan Lee</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shlee1353.github.io/"/>
  <updated>2017-11-15T06:42:16.000Z</updated>
  <id>https://shlee1353.github.io/</id>
  
  <author>
    <name>Ryan Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Angular] Lifecycle Hooks</title>
    <link href="https://shlee1353.github.io/2017/11/15/Angular-Lifecycle-Hooks/"/>
    <id>https://shlee1353.github.io/2017/11/15/Angular-Lifecycle-Hooks/</id>
    <published>2017-11-15T05:15:26.000Z</published>
    <updated>2017-11-15T06:42:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="생명주기-life-cycle"><a href="#생명주기-life-cycle" class="headerlink" title="생명주기(life cycle)"></a>생명주기(life cycle)</h2><p>컴포넌트와 지시자는 <strong>생명주기(life cycle)</strong> 를 가집니다. 생명주기란, 컴포넌트나 지시자가 생성되고 파괴될 때까지의 일련의 과정을 말합니다. 생명주기 안에서는 특정 시점에 훅 메서드(hook method)를 호출할 수 있습니다. 예를들어, 컴포넌트와 지시자가 초기화되면 ngOnInit() 훅 메서드가 호출됩니다. 만약 이 시점에 실행할 내용이 있다면 컴포넌트 클래스 내에서 ngOnInit() 훅 메서드를 선언하면 됩니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> </span>&#123;</span><br><span class="line">    ngOnInit() &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="생명주기-시퀀스"><a href="#생명주기-시퀀스" class="headerlink" title="생명주기 시퀀스"></a>생명주기 시퀀스</h2><p>훅 메서드는 호출될 때 일정한 순서로 호출됩니다. 이처럼 일정한 순서로 호출되는 과정을 <strong>생명주기 시퀀스(lifecycle sequence)</strong> 라고 합니다. 아래와 같은 순서로 이루어집니다. 생명주기 시퀀스는 초기화 시점, 상태 체크 시점, 이벤트 시점으로 다시 나뉩니다.</p><ol><li>ngOnChanges</li><li>ngOnInit</li><li>ngDoCheck</li></ol><hr><ol><li>ngAfterContentInit</li><li>ngAfterContentChecked</li><li>ngAfterViewInit</li><li>ngAfterViewChecked</li></ol><hr><ol><li>ngOnDestroy</li></ol><p><strong>초기화</strong></p><ul><li>ngOnInit() : 컴포넌트나 지시자가 생성될 때 호출되는 메서드. 생명주기의 초기화 시점입니다.</li><li>ngAfterContentInit() : 외부 콘텐츠가 컴포넌트 뷰로 들어갔을 때 호출</li><li>ngAfterViewInit() : 컴포넌트 뷰와 자식 뷰가 초기화되고 나서 호출</li></ul><p><strong>상태체크</strong></p><ul><li>ngDoCheck() 메서드가 호출되고 나서 ngAfterViewChecked() 가 호출되기까지 콘텐츠와 뷰에 대한 상태 점검이 진행되는 때를 말합니다. </li><li><p><strong>콘텐츠</strong> : 컴포넌트가 선언될 때 내부 엘리먼트에 선언한 엘리먼트의 속성값을 말합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent [prop]=<span class="string">".."</span>&gt;</span><br><span class="line">    &lt;child name=<span class="string">""</span>&gt;&lt;/child&gt; <span class="comment">// 콘텐츠</span></span><br><span class="line">&lt;<span class="regexp">/parent&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Content projection(transclusion)</strong> : 컴포넌트 외부에서 HTML을 가져와 컴포넌트 내부에 원하는 위치에 추가함. Content projection을 의도하지 않았다면 콘텐츠를 컴포넌트 사이에 절대 넣지 마세요.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AfterContentParentComponent</span></span><br><span class="line"><span class="string">`&lt;after-content&gt;</span></span><br><span class="line"><span class="string">   &lt;my-child&gt;&lt;/my-child&gt;</span></span><br><span class="line"><span class="string"> &lt;/after-content&gt;`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// AfterContentComponent</span></span><br><span class="line">template: <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;div&gt;-- projected content begins --&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;ng-content&gt;&lt;/ng-content&gt;</span></span><br><span class="line"><span class="string">  &lt;div&gt;-- projected content ends --&lt;/div&gt;`</span></span><br></pre></td></tr></table></figure></li><li><p><strong>뷰</strong> : 컴포넌트 내부 탬플릿에 선언한 지시자의 상태</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'parent'</span>,</span><br><span class="line">    template:<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;my-click id="1" *ngIf="status"&gt;&lt;/my-click&gt;  // 지시자</span></span><br><span class="line"><span class="string">    &lt;my-click id="2" *ngIf="status"&gt;&lt;/my-click&gt;`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>이벤트 시점</strong></p><ul><li><p>컴포넌트가 초기화될 때는 ngOnInit() 메서드가 먼저 호출되지만 컴포넌트나 지시자에서 속성 바인딩에 의한 이벤트가 발생하면 ngOnChanges() 가 호출되고 나서 ngOnInit() 이 호출됩니다. ngOnChanges() 메서드는 현재 상태값(currentValue)과 이전 상태값(previousValue)을 확인할 수 있는 SimpleChanges 객체를 받습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SimpleChanges 사용법</span></span><br><span class="line"><span class="keyword">import</span> &#123;Component, OnChanges, SimpleChanges &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line">ngOnChanges(changes: SimpleChanges) &#123;</span><br><span class="line">    changes.prop</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ngOnDestroy()는 컴포넌트나 지시자를 제거할 때 실행됩니다.</p></li></ul><h2 id="컴포넌트-생명주기"><a href="#컴포넌트-생명주기" class="headerlink" title="컴포넌트 생명주기"></a>컴포넌트 생명주기</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cmp-lifecycle</span><br><span class="line">    ㄴ child-cmp.component.ts</span><br><span class="line">    ㄴ cmp-lifecycle.component.ts</span><br><span class="line">    ㄴ my-cmp.component.ts</span><br><span class="line">    ㄴ window.directive.ts</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// child-cmp.component.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component, Input, ContentChild, ViewChild, OnChanges, DoCheck, OnInit, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MyCmp &#125; <span class="keyword">from</span> <span class="string">'./my-cmp.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Window &#125; <span class="keyword">from</span> <span class="string">'./window.directive'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'child-cmp'</span>,</span><br><span class="line">    template: <span class="string">`&lt;input type="text" [(ngModel)]="message" placeholder="바인딩 있음"&gt; &lt;input type="text" placeholder="바인딩 없음"&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // window 지시자는 ngif 상태에 따라 상태값을 결정</span></span><br><span class="line"><span class="string">    &lt;window id="1" *ngIf="shouldShow"&gt;&lt;/window&gt;</span></span><br><span class="line"><span class="string">    &lt;window id="2" *ngIf="!shouldShow"&gt;&lt;/window&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;button (click)="toggle()"&gt;View 상태변경&lt;/button&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// implements 키워드를 이용해 컴포넌트 클래스에 훅을 구현</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildCmp</span> <span class="title">implements</span> <span class="title">OnChanges</span>, <span class="title">DoCheck</span>, <span class="title">OnInit</span>, <span class="title">AfterContentInit</span>, <span class="title">AfterContentChecked</span>, <span class="title">AfterViewInit</span>, <span class="title">AfterViewChecked</span>, <span class="title">OnDestroy</span> </span>&#123;</span><br><span class="line">    message: string = <span class="string">""</span>;</span><br><span class="line">    oldMessage: string = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>() &#123; <span class="built_in">console</span>.log(<span class="string">"\n1-컴포넌트 : constructor()"</span>); &#125;</span><br><span class="line"></span><br><span class="line">    @Input()</span><br><span class="line">    set prop(name: string) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"@Input prop() 세터 메서드 호출"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngOnChanges() &#123; <span class="built_in">console</span>.log(<span class="string">"2--컴포넌트 : ngOnChanges()"</span>); &#125;</span><br><span class="line">    ngOnInit() &#123; <span class="built_in">console</span>.log(<span class="string">"3---컴포넌트 : ngOnInit()"</span>); &#125;</span><br><span class="line">    ngDoCheck() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"4----컴포넌트 : ngDoCheck()"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.message != <span class="keyword">this</span>.oldMessage) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"4----컴포넌트 : ngDoCheck()에서 변화감지"</span>);</span><br><span class="line">            <span class="keyword">this</span>.oldMessage = <span class="keyword">this</span>.message;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @ContentChild 장식자를 이용해 child-cmp의 자식 엘리먼트인 my-cmp 컴포넌트에 선언된 속성값을 받음</span></span><br><span class="line">    @ContentChild(MyCmp) myCmp: MyCmp;</span><br><span class="line">    oldMyCmpId: any;</span><br><span class="line"></span><br><span class="line">    ngAfterContentInit() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"5-----컴포넌트 : ngAfterContentInit()"</span>);</span><br><span class="line">        <span class="keyword">this</span>.oldMyCmpId = <span class="keyword">this</span>.myCmp.value;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    ngAfterContentChecked() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"6------컴포넌트 : ngAfterContentChecked()"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.oldMyCmpId != <span class="keyword">this</span>.myCmp.value) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"6------컴포넌트 : ngAfterContentChecked()에서 변화감지"</span>);</span><br><span class="line">            <span class="keyword">this</span>.oldMyCmpId = <span class="keyword">this</span>.myCmp.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    shouldShow = <span class="literal">true</span>;</span><br><span class="line">    toggle() &#123; <span class="keyword">this</span>.shouldShow = !<span class="keyword">this</span>.shouldShow; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Query for a VIEW child of type `Window`</span></span><br><span class="line">    @ViewChild(Window) <span class="built_in">window</span>;</span><br><span class="line">    oldWindowId: any;</span><br><span class="line"></span><br><span class="line">    ngAfterViewInit() &#123;</span><br><span class="line">        <span class="comment">// viewChild is set after the view has been initialized</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"7-------컴포넌트 : ngAfterViewInit()"</span>);</span><br><span class="line">        <span class="keyword">this</span>.oldWindowId = <span class="keyword">this</span>.window.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngAfterViewChecked() &#123;</span><br><span class="line">        <span class="comment">// viewChild is updated after the view has been checked</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"8--------컴포넌트 : ngAfterViewChecked()"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.oldWindowId != <span class="keyword">this</span>.window.id) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"8--------컴포넌트 : ngAfterViewChecked()에서 변화감지"</span>);</span><br><span class="line">            <span class="keyword">this</span>.oldWindowId = <span class="keyword">this</span>.window.id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ngOnDestroy() &#123; <span class="built_in">console</span>.log(<span class="string">"9---------컴포넌트 : ngOnDestroy()"</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// my-cmp.component.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component, Input &#125;  <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'my-cmp'</span>,</span><br><span class="line">    template: <span class="string">``</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCmp</span> </span>&#123;</span><br><span class="line">    @Input() value: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cmp-lifecycle.component.ts</span></span><br><span class="line"><span class="comment">// cmp-lifecycle은 my-cmp 컴포넌트를 콘텐츠로 가진다</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'cmp-lifecycle'</span>,</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button (click)="toggle()"&gt;Content 상태변경&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;button (click)="isShow=!isShow"&gt;&#123;&#123;isShow==false?'컴포넌트 추가':'컴포넌트 삭제'&#125;&#125;&lt;/button&gt;    </span></span><br><span class="line"><span class="string">    &lt;br&gt;</span></span><br><span class="line"><span class="string">    &lt;child-cmp *ngIf="isShow" [prop]="shouldShow"&gt;</span></span><br><span class="line"><span class="string">        &lt;my-cmp value="&#123;&#123;shouldShow&#125;&#125;"&gt;&lt;/my-cmp&gt;</span></span><br><span class="line"><span class="string">    &lt;/child-cmp&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CmpLifecycleComponent</span> </span>&#123;</span><br><span class="line">    isShow: boolean = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    shouldShow = <span class="literal">true</span>;</span><br><span class="line">    toggle() &#123; <span class="keyword">this</span>.shouldShow = !<span class="keyword">this</span>.shouldShow; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="콘텐츠-훅-vs-뷰-훅"><a href="#콘텐츠-훅-vs-뷰-훅" class="headerlink" title="콘텐츠 훅 vs. 뷰 훅"></a>콘텐츠 훅 vs. 뷰 훅</h3><p>콘텐츠 훅과 뷰 훅은 매우 유사하지만 분명한 차이점이 있습니다.</p><ul><li>AfterContent 훅은 ContentChildren 을 고려합니다 (컴포넌트 안으로 투영된 자식 컴포넌트)</li><li>AfterView 훅은 ViewChildren 을 고려합니다 (자식 컴포넌트로 컴포넌트 템플릿 안에 엘리먼트 태그로 존재함)</li></ul><h3 id="컴포넌트-생명주기-콘텐츠-훅"><a href="#컴포넌트-생명주기-콘텐츠-훅" class="headerlink" title="컴포넌트 생명주기 (콘텐츠 훅)"></a>컴포넌트 생명주기 (콘텐츠 훅)</h3><ul><li>초기값을 확인해보면 shouldShow = true, isShow = false 입니다.</li><li><strong>Content  상태변경</strong> 클릭시, shouldShow = true, false 전환되지만, 외부 뷰의 표시를 결정하지 않기 때문에 훅 메서드를 호출하지 않습니다.</li><li><strong>컴포넌트 추가</strong> 를 클릭하면, isShow가 true값으로 변하면서 child-cmp가 화면에 그려지기 때문에 초기 출력 로그를 확인할 수 있습니다.</li><li>컴포넌트 시퀀스 생명주기가 나타나고 (1)-(8), child-cmp 컴포넌트 내부에 ngModel 바인딩이 일어나 (4)-(8) 훅에 대한 로그 결과 출력.</li><li>(4)~(8) 로그가 출력된 이유는 child-cmp 컴포넌트 내부에 ngModel 바인딩이 일어났기 때문입니다.</li><li>현재까지의 상태값을 확인해보면, shouldShow = true, isShow = true, this.oldMyCmpId = true, this.myCmp.value = true 입니다.</li><li><p>이제 다시 <strong>Content  상태변경</strong> 을 클릭하면 아래와같은 출력 로그를 확인할 수 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Input prop() 세터 메서드 호출</span><br><span class="line">2--컴포넌트 : ngOnChanges()</span><br><span class="line">4----컴포넌트 : ngDoCheck()</span><br><span class="line">6------컴포넌트 : ngAfterContentChecked()</span><br><span class="line">6------컴포넌트 : ngAfterContentChecked()에서 변화감지</span><br><span class="line">8--------컴포넌트 : ngAfterViewChecked()</span><br></pre></td></tr></table></figure></li><li><p><strong>Content 상태변경</strong> 을 클릭할 때 shouldShow 값이 바뀌면서 속성바인딩 [prop]=”shouldShow” 의 상태가 변경되면서 이를 @Input() set prop(name: string) {…} 에서 받은 뒤 ngOnChanges() 호출</p></li><li>child-cmp 엘리먼트의 [prop] 상태가 변경되었기 때문에 상태점검을 히기위해 ngDoCheck() 호출</li><li>my-cmp 엘리먼트의 속성값이 바뀐걸 확인하기 위해, 이전값과 새로운값을 비교한뒤 “ngAfterContentChecked()에서 감지변화” 호출. 이때 my-cmp의 속성값은 <strong>@ContentChild</strong>(MyCmp) myCmp: MyCmp; 로 받아옵니다.</li></ul><h3 id="컴포넌트-생명주기-뷰-훅"><a href="#컴포넌트-생명주기-뷰-훅" class="headerlink" title="컴포넌트 생명주기 (뷰 훅)"></a>컴포넌트 생명주기 (뷰 훅)</h3><ul><li>[(ngModel)]=”message”로 바인딩 되어있는 input에 텍스트를 추가하면 this.oldMessage, this.message 를 비교하여 “ngDoCheck()에서 변화감지” 를 출력</li><li>바인딩이없는 input에 입력시 아무런 호출도 일어나지 않습니다.</li><li><strong>View 상태변경</strong> 클릭시 this.shouldShow 상태값 변경되면서 @ViewChild 장식자를 통해 window 지시자에서 가져오는 id값이 달라집니다.</li><li>이전 값과 현재 값이 달라져서 “ngAfterViewChecked()에서 변화감지” 호출</li><li><strong>컴포넌트 삭제</strong> 클릭시 ngOnDestroy() 메서드가 호출됩니다.</li></ul><h2 id="지시자-생명주기"><a href="#지시자-생명주기" class="headerlink" title="지시자 생명주기"></a>지시자 생명주기</h2><p>앞서 살펴본 컴포넌트의 생명주기와 크게 다르지 않습니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Directive, Input &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Directive(&#123;</span><br><span class="line">    selector: <span class="string">'[my-click]'</span>,</span><br><span class="line">    host: &#123; <span class="string">'(click)'</span>: <span class="string">'onClick()'</span> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClickDirective</span></span>&#123;</span><br><span class="line">    _prop: string = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">    @Input()</span><br><span class="line">    set prop(name: string) &#123;</span><br><span class="line">        <span class="keyword">this</span>._prop = name || <span class="string">''</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"@Input prop() 세터 메서드 호출"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    onClick() &#123; <span class="built_in">console</span>.log(<span class="string">"지시자 : onClick() 메서드 호출"</span>); &#125;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123; <span class="built_in">console</span>.log(<span class="string">"1-지시자 : constructor()"</span>); &#125;    </span><br><span class="line">    ngOnChanges() &#123; <span class="built_in">console</span>.log(<span class="string">"2--지시자 : ngOnChanges()"</span>); &#125;</span><br><span class="line">    ngOnInit() &#123; <span class="built_in">console</span>.log(<span class="string">"3---지시자 : ngOnInit()"</span>); &#125;</span><br><span class="line">    ngDoCheck() &#123; <span class="built_in">console</span>.log(<span class="string">"4----지시자 : ngDoCheck()"</span>); &#125;    </span><br><span class="line">    ngAfterContentInit() &#123; <span class="built_in">console</span>.log(<span class="string">"5-----지시자 : ngAfterContentInit()"</span>); &#125;</span><br><span class="line">    ngAfterContentChecked() &#123; <span class="built_in">console</span>.log(<span class="string">"6------지시자 : ngAfterContentChecked()"</span>); &#125;</span><br><span class="line">    ngAfterViewInit() &#123; <span class="built_in">console</span>.log(<span class="string">"7-------지시자 : ngAfterViewInit()"</span>); &#125;</span><br><span class="line">    ngAfterViewChecked() &#123; <span class="built_in">console</span>.log(<span class="string">"8--------지시자 : ngAfterViewChecked()"</span>); &#125;</span><br><span class="line">    ngOnDestroy() &#123; <span class="built_in">console</span>.log(<span class="string">"9---------지시자 : ngOnDestroy()"</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><strong>지시자 추가</strong> 를 클릭하면 my-click 지시자가 호출됩니다. prop 속성 바인딩을 통해 자신의 상태를 변경하기 때문에 세터 메서드와 ngOnChanges() 훅이 호출되었습니다.</li><li><p>지시자 내부에서 컴포넌트 전용 훅이 호출되지만, 지시자 생명주기로는 사용하지 않습니다. 아래 4가지 공통 훅을 사용합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ngOnChanges(...)</span><br><span class="line">ngOnInit(...)</span><br><span class="line">ngDoCheck(...)</span><br><span class="line">ngOnDestroy(...)</span><br></pre></td></tr></table></figure></li><li><p><strong>상태변경</strong> 을 클릭하면 my-click 지시자의 prop 속성값이 변하면서 지시자 내부에서는 상태변경과 검사를 위한 훅 메서드가 호출됩니다.</p></li><li><strong>my-click 지시자</strong> 를 클릭하면 onClick() 메서드가 호출 되면서 상태 점검 ngDoCheck() 이 뒤이어 호출됩니다.</li></ul><h2 id="Angular-vs-React"><a href="#Angular-vs-React" class="headerlink" title="Angular vs. React"></a>Angular vs. React</h2><table><thead><tr><th>Angular</th><th>React</th></tr></thead><tbody><tr><td>constructor</td><td>constructor()</td></tr><tr><td>ngOnChanges</td><td>componentWillMount()</td></tr><tr><td>ngOnInut</td><td>render()</td></tr><tr><td>ngDoCheck</td><td>componentDidMount()</td></tr><tr><td>ngAfterContentInit</td><td>componentWillReceiveProps()</td></tr><tr><td>ngAfterContentChecked</td><td>shouldComponentUpdate()</td></tr><tr><td>ngAfterViewInit</td><td>componentWillUpdate()</td></tr><tr><td>ngAfterViewChecked</td><td>render()</td></tr><tr><td>ngOnDestory</td><td>componentDidUpdate()</td></tr><tr><td></td><td>componentWillUnmount()</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;생명주기-life-cycle&quot;&gt;&lt;a href=&quot;#생명주기-life-cycle&quot; class=&quot;headerlink&quot; title=&quot;생명주기(life cycle)&quot;&gt;&lt;/a&gt;생명주기(life cycle)&lt;/h2&gt;&lt;p&gt;컴포넌트와 지시자는 &lt;stro
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[Node] Express Server</title>
    <link href="https://shlee1353.github.io/2017/11/15/Node-Express-Server/"/>
    <id>https://shlee1353.github.io/2017/11/15/Node-Express-Server/</id>
    <published>2017-11-15T05:12:33.000Z</published>
    <updated>2017-11-15T05:13:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Express</strong> is a minimal and flexible Node.js web application framework that provides a robust set of features to develop web and mobile applications. It facilitates the rapid development of Node based Web applications. </p><p><strong>tutorial source</strong><br>After cloning this repository, checkout to <strong>feature/express-basic</strong></p><h3 id="Installing-Express"><a href="#Installing-Express" class="headerlink" title="Installing Express"></a>Installing Express</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm init // package.json name : express-tutorial</span><br><span class="line"></span><br><span class="line">npm install express --save</span><br><span class="line"></span><br><span class="line">// npm install express-generator -g</span><br><span class="line">// express myproject --ejs</span><br></pre></td></tr></table></figure><h3 id="1-간단한-웹서버-작성"><a href="#1-간단한-웹서버-작성" class="headerlink" title="1. 간단한 웹서버 작성"></a>1. 간단한 웹서버 작성</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// basic.server.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">response.send(<span class="string">'&lt;h1&gt;hellp express&lt;/h1&gt;'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'web server started'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-라우팅"><a href="#2-라우팅" class="headerlink" title="2. 라우팅"></a>2. 라우팅</h3><ul><li>HTTP 요청의 메서드와 URL(PATH) 형태에 따라 분기하는 역할</li><li>HTTP 메서드로부터 파생<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// route.server.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/a'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">response.send(<span class="string">'&lt;a href="/b"&gt;Go to B&lt;/a&gt;'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/b'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">response.send(<span class="string">'&lt;a href="/a"&gt;Go to A&lt;/a&gt;'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://localhost:8080/page?name=Ryan</span></span><br><span class="line">app.get(<span class="string">'/page'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">response.send(<span class="string">'welcome'</span> + request.query.name);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://localhost:8080/page/Ryan</span></span><br><span class="line">app.get(<span class="string">'/page/:name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">response.send(<span class="string">'welcome'</span> + request.params.name);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'web server started'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-미들웨어"><a href="#3-미들웨어" class="headerlink" title="3. 미들웨어"></a>3. 미들웨어</h3><ul><li>http 모듈과 express 모듈의 가장 큰 차이는 미들웨어의 유무</li><li>요청에 대한 응답을 완료하기 전까지 요청 중간에서 여러가지 일을 처리</li><li>use() 메서드로 미들웨어를 적용</li><li>next() 함수를 호출하여 다음 미들웨어로 제어권을 넘김<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// middleware.server.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/special'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response, next</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'스페셜 미들웨어'</span>);</span><br><span class="line">response.send(<span class="string">'special middleware'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">request, response, next</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'미들웨어 1'</span>);</span><br><span class="line">next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">request, response, next</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'미들웨어 2'</span>);</span><br><span class="line">response.end(<span class="string">'middleware 1,2'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'web server started'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-static-미들웨어"><a href="#4-static-미들웨어" class="headerlink" title="4. static 미들웨어"></a>4. static 미들웨어</h3><ul><li>express 에서 기본 제공하는 미들웨어</li><li>이미지, CSS, JS, HTML 파일과 같은 정적 리소스를 제공할 루트 경로를 지정하는 역할<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// static.server.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 기본호출</span></span><br><span class="line">app.use(express.static(__dirname + <span class="string">'/static'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//가상경로 지정</span></span><br><span class="line">app.use(<span class="string">'/public'</span>, express.static(__dirname + <span class="string">'/static'</span>));</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'web server started'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-body-parser-미들웨어"><a href="#5-body-parser-미들웨어" class="headerlink" title="5. body-parser 미들웨어"></a>5. body-parser 미들웨어</h3><ul><li>POST 요청시 전달된 데이터를 추출하는 미들웨어</li><li>body-parser 미들웨어를 사용하려면 request객체에 body 속성이 부여됨</li><li><a href="https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop" target="_blank" rel="external">Postman</a>을 통해 POST 요청 확인 가능함</li><li>포스트맨 사용시 <a href="https://gist.github.com/jays1204/703297eb0da1facdc454" target="_blank" rel="external">Content-Type</a>은 application/x-www-form-urlencode를 사용 (key-value&amp;key=value…의 형태로 전송)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install body-parser --save</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// static.server.js</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;));</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/post'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">response.send(<span class="string">"POST Data:"</span> + request.body.content);</span><br><span class="line">&#125;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="6-템플릿-엔진"><a href="#6-템플릿-엔진" class="headerlink" title="6. 템플릿 엔진"></a>6. 템플릿 엔진</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ejs --save</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// index.ejs</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=title%</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">%=message%</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// template.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.set(<span class="string">'views'</span>, <span class="string">'./views'</span>);</span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs'</span>);</span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">response.render(<span class="string">'index'</span>, &#123;<span class="attr">title</span>: <span class="string">'Hello'</span>, <span class="attr">message</span>: <span class="string">'Express!'</span>&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'web server started'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="7-todoapp-API"><a href="#7-todoapp-API" class="headerlink" title="7. todoapp API"></a>7. todoapp API</h3><p>After cloning this repository, checkout to <strong>feature/express-todoapp</strong><br><strong>7-1. todo.server.js</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Express 모듈 추출</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// body-parser 미들웨어 추출</span></span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Express 서버 객체 생성</span></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 정적 리소스 경로 지정</span></span><br><span class="line">app.use(express.static(__dirname + <span class="string">'/static'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// body-parser 미들웨어 적용</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 라우팅</span></span><br><span class="line">app.use(<span class="string">'/'</span>, <span class="built_in">require</span>(<span class="string">'./todo.router.js'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 서버 구동</span></span><br><span class="line">app.listen(<span class="number">8080</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'web server started'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>To serve static files such as images, CSS files, and JavaScript files, use the <strong>express.static</strong> built-in middleware function in Express. You can load the files that are in the public directory. Express looks up the files relative to the static directory, so the name of the static directory is not part of the URL. <strong>__dirname</strong> is the directory name of the current module. It’s safer to use the absolute path of the directory that you want to serve:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(<span class="string">'public'</span>))</span><br><span class="line"></span><br><span class="line">http:<span class="comment">//localhost:3000/images/kitten.jpg</span></span><br><span class="line">http:<span class="comment">//localhost:3000/css/style.css</span></span><br><span class="line">http:<span class="comment">//localhost:3000/js/app.js</span></span><br><span class="line">http:<span class="comment">//localhost:3000/images/bg.png</span></span><br><span class="line">http:<span class="comment">//localhost:3000/hello.html</span></span><br></pre></td></tr></table></figure></p><p>To use multiple static assets directories, call the express.static middleware function multiple times:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(<span class="string">'public'</span>))</span><br><span class="line">app.use(express.static(<span class="string">'files'</span>))</span><br></pre></td></tr></table></figure></p><p><strong>7-2. todo.router.js</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 데이터를 저장할 디렉토리</span></span><br><span class="line"><span class="keyword">var</span> dataPath = __dirname + <span class="string">'/data/'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO 목록 조회</span></span><br><span class="line">router.get(<span class="string">'/todos'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> files = fs.readdirSync(dataPath);</span><br><span class="line"><span class="comment">// [ '1499652647873.json', '1499652721429.json', '1499652725947.json', '1499652729161.json', '1499652734901.json' ]</span></span><br><span class="line"><span class="keyword">var</span> todos = [];</span><br><span class="line"><span class="comment">// [ &#123; id: 1499652647873, content: 'To do list 실습 테스트' &#125;,</span></span><br><span class="line"><span class="comment">// &#123; id: 1499652721429, content: '등록 기능 개발' &#125;,</span></span><br><span class="line"><span class="comment">// &#123; id: 1499652725947, content: '목록 조회 기능 개발' &#125;,</span></span><br><span class="line"><span class="comment">// &#123; id: 1499652729161, content: '삭제 기능 개발' &#125;,</span></span><br><span class="line"><span class="comment">// &#123; id: 1499652734901, content: '완성!' &#125; ]</span></span><br><span class="line"></span><br><span class="line">files.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> jsonData = <span class="built_in">JSON</span>.parse(fs.readFileSync(dataPath + file, <span class="string">'utf8'</span>));</span><br><span class="line">todos.push(jsonData);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">res.send(&#123;</span><br><span class="line">result: <span class="string">'success'</span>,</span><br><span class="line">data: todos</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO 추가</span></span><br><span class="line">router.post(<span class="string">'/todos'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> id = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"><span class="comment">// 1500880894981</span></span><br><span class="line"><span class="keyword">var</span> filePath = dataPath + id + <span class="string">'.json'</span>;</span><br><span class="line"><span class="comment">// .../data/1500880942949.json</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsonData = &#123;</span><br><span class="line">id:id,</span><br><span class="line">content:req.body.content</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// &#123; id: 1500880894981, content: 'test' &#125;</span></span><br><span class="line"></span><br><span class="line">fs.writeFileSync(filePath, <span class="built_in">JSON</span>.stringify(jsonData), <span class="string">'utf8'</span>);</span><br><span class="line"></span><br><span class="line">res.send(&#123;</span><br><span class="line">result: <span class="string">'success'</span>,</span><br><span class="line">data: jsonData</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO 삭제</span></span><br><span class="line">router.delete(<span class="regexp">/todos\/(\d+)/</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line"><span class="comment">// \d is a digit (a character in the range 0-9), and + means 1 or more times. So, \d+ is 1 or more digits.</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">fs.unlinkSync(dataPath + req.params[<span class="number">0</span>] + <span class="string">'.json'</span>);</span><br><span class="line">res.send(&#123;</span><br><span class="line">result: <span class="string">'success'</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">res.send(&#123;</span><br><span class="line">result: <span class="string">'failed'</span>,</span><br><span class="line">error: e.syscall + <span class="string">' error'</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure></p><p><strong>express.Router</strong><br>모듈식 마운팅이 가능한 핸들러를 작성할 수 있음. 라우트를 모듈로 작성하고 미들웨어함수 로드 및 라우팅을 정의한 후 기본앱의 한 경로에 라우터 모듈을 마운트합니다.</p><p>The Node.js file system module allow you to work with the file system on your computer. To include the File System module, use the require() method:</p><ul><li><p>Read Files</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dataPath = __dirname;</span><br><span class="line"></span><br><span class="line"><span class="comment">// readFile</span></span><br><span class="line">fs.readFile(dataPath + <span class="string">'/index.html'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// readFileSync</span></span><br><span class="line"><span class="keyword">var</span> contensts = fs.readFileSync(dataPath + <span class="string">'/index.html'</span>).toString();</span><br><span class="line"><span class="built_in">console</span>.log(contensts);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'web server started'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>Create Files</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dataPath = __dirname;</span><br><span class="line"><span class="keyword">var</span> filePath = dataPath + <span class="string">'/data/'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Hello content!Hello content!Hello content!Hello content!</span></span><br><span class="line">fs.appendFile(filePath + <span class="string">'mynewfile1.txt'</span>, <span class="string">'Hello content!'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Saved!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hello content!</span></span><br><span class="line">fs.writeFile(filePath + <span class="string">'mynewfile2.txt'</span>, <span class="string">'Hello content!'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Saved!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'web server started'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>Delete Files</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dataPath = __dirname;</span><br><span class="line"><span class="keyword">var</span> filePath = dataPath + <span class="string">'/data/'</span></span><br><span class="line"></span><br><span class="line">fs.unlink(filePath + <span class="string">'mynewfile2.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'File deleted!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p><strong>7-3. app.js</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> todoModel = (<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_api</span>(<span class="params">url, method, data</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> deferred = $.Deferred();</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url: url, </span><br><span class="line">method: method, </span><br><span class="line">data: data, </span><br><span class="line">success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(res.result === <span class="string">'success'</span>)&#123;</span><br><span class="line">deferred.resolve(res);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">deferred.reject(res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">error: <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">'API 호출 실패 :'</span>, url, err);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> deferred.promise();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">getTodos : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> _api(<span class="string">'/todos'</span>, <span class="string">'get'</span>);</span><br><span class="line">&#125;, <span class="comment">// (9)</span></span><br><span class="line"></span><br><span class="line">addTodo : <span class="function"><span class="keyword">function</span>(<span class="params">content</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> _api(<span class="string">'/todos'</span>, <span class="string">'post'</span>, &#123;<span class="attr">content</span>:content&#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">deleteTodo : <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> _api(<span class="string">'/todos/'</span> + id, <span class="string">'delete'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> todoView = (<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> self;</span><br><span class="line"><span class="keyword">var</span> $els = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _prependTodo = <span class="function"><span class="keyword">function</span>(<span class="params">id, content</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> $newTodo = $els.todoItemTemplate.clone();</span><br><span class="line"></span><br><span class="line">$newTodo</span><br><span class="line">.attr(<span class="string">'data-todoid'</span>, id)</span><br><span class="line">.find(<span class="string">'._todoContent'</span>)</span><br><span class="line">.text(content);</span><br><span class="line"></span><br><span class="line">$els.todoList.prepend($newTodo);</span><br><span class="line">&#125;; <span class="comment">// (15)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _onSubmit = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> content = $els.todoInput.val().trim();</span><br><span class="line"></span><br><span class="line">$els.todoInput</span><br><span class="line">.val(<span class="string">''</span>)</span><br><span class="line">.focus();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(content.length)&#123;</span><br><span class="line">$(self).trigger(<span class="string">'addTodo'</span>, [content]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">e.preventDefault();</span><br><span class="line">&#125;; <span class="comment">// (12)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _onClickDeleteBtn = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> todoId = $(e.currentTarget).closest(<span class="string">'._todoItem'</span>).attr(<span class="string">'data-todoid'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(confirm(<span class="string">'삭제하시겠습니까?'</span>))&#123;</span><br><span class="line">$(self).trigger(<span class="string">'deleteTodo'</span>, [todoId]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">init : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">self = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.cacheElements();</span><br><span class="line"><span class="keyword">this</span>.bindEvents();</span><br><span class="line">&#125;, <span class="comment">// (3)</span></span><br><span class="line"></span><br><span class="line">cacheElements : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$els.todoForm = $(<span class="string">'._todoInputForm'</span>);</span><br><span class="line">$els.todoInput = $(<span class="string">'._todoInput'</span>);</span><br><span class="line">$els.todoItemTemplate = $(<span class="string">'._todoItem'</span>).detach();</span><br><span class="line">$els.todoList = $(<span class="string">'._todoList'</span>);</span><br><span class="line"></span><br><span class="line">$els.todoList</span><br><span class="line">.empty()</span><br><span class="line">.show();</span><br><span class="line">&#125;, <span class="comment">// (4), (5)</span></span><br><span class="line"></span><br><span class="line">bindEvents : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$els.todoForm.on(<span class="string">'submit'</span>, _onSubmit);</span><br><span class="line">$els.todoList.on(<span class="string">'click'</span>, <span class="string">'._deleteBtn'</span>, _onClickDeleteBtn);</span><br><span class="line">&#125;, <span class="comment">// (6), (11)</span></span><br><span class="line"></span><br><span class="line">renderTodos : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">$els.todoList.empty();</span><br><span class="line"></span><br><span class="line">$(data).each(<span class="function"><span class="keyword">function</span>(<span class="params">i, item</span>)</span>&#123;</span><br><span class="line">_prependTodo(item.id, item.content);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;, <span class="comment">// (10)</span></span><br><span class="line"></span><br><span class="line">deleteTodo : <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">$els.todoList.find(<span class="string">'._todoItem[data-todoid='</span>+id+<span class="string">']'</span>).remove();</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">prependTodo : <span class="function"><span class="keyword">function</span>(<span class="params">id, content</span>)</span>&#123;</span><br><span class="line">_prependTodo(id, content);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> todoController = (<span class="function"><span class="keyword">function</span>(<span class="params">$, model, view</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> self;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _onAddTodo = <span class="function"><span class="keyword">function</span>(<span class="params">e, content</span>)</span>&#123;</span><br><span class="line">model</span><br><span class="line">.addTodo(content)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">view.prependTodo(res.data.id, res.data.content);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;; <span class="comment">// (14)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _onDeleteTodo = <span class="function"><span class="keyword">function</span>(<span class="params">e, id</span>)</span>&#123;</span><br><span class="line">model</span><br><span class="line">.deleteTodo(id)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">view.deleteTodo(id);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">init : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">self = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">view.init();</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.bindEvents();</span><br><span class="line"><span class="keyword">this</span>.renderTodos();</span><br><span class="line">&#125;, <span class="comment">// (2)</span></span><br><span class="line">               <span class="comment">// 뷰에서 발생한 특정 이벤트에 대해 특정 모델값을 업데이트 한 후 다시 뷰로 전달하는 바인딩</span></span><br><span class="line">bindEvents : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> $view = $(view);</span><br><span class="line"></span><br><span class="line">$view</span><br><span class="line">.on(<span class="string">'addTodo'</span>, _onAddTodo)</span><br><span class="line">.on(<span class="string">'deleteTodo'</span>, _onDeleteTodo);</span><br><span class="line">&#125;, <span class="comment">// (7), (13)</span></span><br><span class="line"></span><br><span class="line">renderTodos : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">model</span><br><span class="line">.getTodos()</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">view.renderTodos(res.data);</span><br><span class="line">&#125;);</span><br><span class="line">&#125; <span class="comment">// (8)</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&#125;)(jQuery, todoModel, todoView).init(); <span class="comment">// (1)</span></span><br></pre></td></tr></table></figure></p><p><strong>Initial Setting</strong></p><ol><li>todoController.init() 실행</li><li>view.init(), bindEvents(), renderTodos() 실행</li><li>cacheElements(), bindEvents() 실행</li><li>The <strong>.detach()</strong> method is the same as .remove(), except that .detach() keeps all jQuery data associated with the removed elements. This method is useful when removed elements are to be reinserted into the DOM at a later time.</li><li>Object {todoForm: n.fn.init(1), todoInput: n.fn.init(1), todoItemTemplate: n.fn.init(1), todoList: n.fn.init(1)}</li><li>bindEvents() 실행 ‘submit’, ‘click’ 이벤트 바인딩</li><li>jQuery 메소드를 사용하기 위해 view 객체를 $() 적용후 ‘addTodo’, ‘deleteTodo’ 이벤트 바인딩</li><li>mode.getTodos() 실행후 res 값을 받아, view.renderTodos(res.data)로 전달. res는 Object {result: “success”, data: Array(6)}</li><li><p>res값은 _api(‘/todos’, ‘get’)를 통해 가져온 데이터 값임. 이때 비동기 프로그래밍을 위해 var deferred = $.Deferred() 를 사용함. $.Deferred()로 deferred 객체를 만들고, 성공했을 때에는 resolve, 실패했을 때에는 reject 메소드를 호출하면 resolve는 done으로, reject는 fail로 연결됨. done이나 fail로 구분하지 않고 한 번에 처리하려면 then 메소드 사용. longAndComplicatedFunction 함수에서 deferred.promise()를 return 해야함.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> longAndComplicatedFunction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> deferred = $.Deferred();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 완료되려면 50초가 걸리는 매우 복잡한 비동기 코드</span></span><br><span class="line">deferred.resolve(<span class="string">'성공'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">           deferred.reject(err);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">return</span> deferred.promise();</span><br><span class="line">&#125;;</span><br><span class="line">longAndComplicatedFunction().done(<span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(message);</span><br><span class="line">&#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;).always(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'완료!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'다음 행동'</span>);</span><br></pre></td></tr></table></figure></li><li><p>renderTodos() 실행. 기존에 있던 리스트($els.todoList.empty())를 삭제 후 전달받은 값을 이용해 each 구문실행. ‘data-todoid’ 값과 컨텐츠를 담고있는 아이템을 생성한후 리스트에 추가한다 ($els.todoList.prepend($newTodo))</p></li></ol><p><strong>add item</strong></p><ol><li>submit 이벤트 발생 후, _onSubmit 함수 실행</li><li><p>input의 값을 content에 담고, 초기화. content 값이 있을 경우 $(self).trigger(‘addTodo’, [content]) 실행. addTodo 는 커스텀 이벤트로 .on 으로 연결된 함수를 실행</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$( <span class="string">"#foo"</span> ).on( <span class="string">"custom"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> event, param1, param2 </span>) </span>&#123;</span><br><span class="line">  alert( param1 + <span class="string">"\n"</span> + param2 );</span><br><span class="line">&#125;);</span><br><span class="line">$( <span class="string">"#foo"</span>).trigger( <span class="string">"custom"</span>, [ <span class="string">"Custom"</span>, <span class="string">"Event"</span> ] );</span><br></pre></td></tr></table></figure></li><li><p>$view.on(‘addTodo’, _onAddTodo) 실행. </p></li><li>입력한 내용은 <a href="https://kevinchisholm.gitbooks.io/handling-post-requests-with-express-and-node-js/content/" target="_blank" rel="external">POST data</a>를 통해 Node.js 웹서버로 전달되며, 전달된 값은 fs.writeFileSync()를 통해 시스템에 저장되며, 생성된 id와 content는 클라이언트 쪽으로 반환됩니다. </li><li>view.prependTodo()의 인자로 전달 되어 _prependTodo()를 실행합니다.</li></ol><p>참고</p><ul><li><a href="https://zellwk.com/blog/crud-express-mongodb/" target="_blank" rel="external">https://zellwk.com/blog/crud-express-mongodb/</a></li><li><a href="https://mlab.com/" target="_blank" rel="external">https://mlab.com/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Express&lt;/strong&gt; is a minimal and flexible Node.js web application framework that provides a robust set of features to develop we
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[JS] Data Management</title>
    <link href="https://shlee1353.github.io/2017/11/15/JS-Data-Management/"/>
    <id>https://shlee1353.github.io/2017/11/15/JS-Data-Management/</id>
    <published>2017-11-15T05:08:41.000Z</published>
    <updated>2017-11-15T05:10:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>JSON is a syntax for storing and exchanging data. JSON is text, and we can convert any JavaScript object into JSON, and send JSON to the server. If you receive data in JSON format, you can convert it into a JavaScript object:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObj = &#123; <span class="string">"name"</span>:<span class="string">"John"</span>, <span class="string">"age"</span>:<span class="number">31</span>, <span class="string">"city"</span>:<span class="string">"New York"</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> myJSON = <span class="built_in">JSON</span>.stringify(myObj);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myJSON = <span class="string">'&#123; "name":"John", "age":31, "city":"New York" &#125;'</span>;</span><br><span class="line"><span class="keyword">var</span> myObj = <span class="built_in">JSON</span>.parse(myJSON);</span><br></pre></td></tr></table></figure></p><h3 id="For-in-loop"><a href="#For-in-loop" class="headerlink" title="For..in loop"></a>For..in loop</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> charactersBooks = &#123;</span><br><span class="line">    Frodo: <span class="string">"Lord of the Rings"</span>,</span><br><span class="line">    Aslan: <span class="string">"Chronicles of Narnia"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> characters = [ ];</span><br><span class="line"><span class="keyword">var</span> title = [ ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// get key</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> charactersBooks) &#123;</span><br><span class="line">    <span class="keyword">if</span> (charactersBooks.hasOwnProperty(key)) &#123;</span><br><span class="line">        characters.push(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get value</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> charactersBooks) &#123;</span><br><span class="line">    <span class="keyword">if</span> (charactersBooks.hasOwnProperty(key)) &#123;</span><br><span class="line">        title.push(charactersBooks[key]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// result</span></span><br><span class="line"><span class="built_in">console</span>.log(characters); <span class="comment">// ["Frodo", "Aslan"]</span></span><br><span class="line"><span class="built_in">console</span>.log(title); <span class="comment">// ["Lord of the Rings", "Chronicles of Narnia"]</span></span><br></pre></td></tr></table></figure><p>charactersBooks 이라는 객체가 있습니다. 이 객체는 주인공과 책 제목을 프로퍼티로 가지고 있습니다. 이제 characters와 title 두 배열에 주인공과 책 제목을 추가 하도록 하겠습니다. 객체의 key와  value값을 가져오는 방법은 매우 다양합니다. 저희가 사용할 방법은 <strong>for..in</strong> 반복문 입니다. 반복문과 함께 <strong>hasOwnProperty</strong>도 사용하도록 하겠습니다. 이 메소드는 객체가 특정 프로퍼티를 자기만의 직접적인 프로퍼티로서 소유하고 있는지를 판단하는데 사용됩니다.  <strong>in</strong> 연산과는 다르게, 이 메소드는 객체의 프로토타입 체인을 확인하지 않습니다. (<a href="http://adripofjavascript.com/blog/drips/the-uses-of-in-vs-hasownproperty.html" target="_blank" rel="external">in과 hasOwnProperty 사용법</a>)</p><h3 id="Merge-two-arrays"><a href="#Merge-two-arrays" class="headerlink" title="Merge two arrays"></a>Merge two arrays</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> characters = [<span class="string">"Frodo"</span>, <span class="string">"Aslan"</span>];</span><br><span class="line"><span class="keyword">var</span> title =  [<span class="string">"Lord of the Rings"</span>, <span class="string">"Chronicles of Narnia"</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.push.apply(characters, title);</span><br><span class="line"><span class="built_in">console</span>.log(characters); </span><br><span class="line"><span class="comment">// ["Frodo", "Aslan", "Lord of the Rings", "Chronicles of Narnia"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> characterList = characters.concat(title);</span><br><span class="line"><span class="built_in">console</span>.log(characterList); </span><br><span class="line"><span class="comment">// ["Frodo", "Aslan", "Lord of the Rings", "Chronicles of Narnia"]</span></span><br></pre></td></tr></table></figure><p>두 배열을 하나의 배열로 만드는 방법 중 하나는 기존에 있던 배열에 새로운 배열을 추가하는 방법이 있습니다. 다른 하나는 두 배열을 합쳐 새로운 배열을 만드는 방법이 있습니다. 기존 배열에 추가를 할 때는Array.prototype.push.apply(thisArg, [argsArray])를 사용합니다. apply() 메소드는 주어진 this값과 arguments로 함수를 호출합니다. arguments에는 배열 또는 유사배열객체가 올 수 있으며 함수를 호출할때 입력된 이자가 담겨져 있습니다. 함수에 전달될 여러 개의 인자를 받는 call()구문과 유사합니다. <a href="http://devbox.tistory.com/entry/JavaScript-arguments%EC%9C%A0%EC%82%AC-%EB%B0%B0%EC%97%B4-%EA%B0%9D%EC%B2%B4" target="_blank" rel="external">arguments</a>가 유사배열이기 때문에 push()를 사용할 수가 없어서 Array.prototype에 있는 push()를 불러와야 합니다.</p><p>만약, 배열 안에 있는 문자열을 합치려면 +=, join(), concat()을 사용하시면 됩니다. <a href="https://www.codeschool.com/discuss/t/string-concatenation-join-v-v-concat/5307" target="_blank" rel="external">브라우저 속도 차이</a>가 있기 때문에 필요에 맞게 사용하시면 됩니다. 일반적으로는 += 를 사용하는 것이 성능상 좋다고 합니다.</p><p><a href="https://www.zerocho.com/category/Javascript/post/57433645a48729787807c3fd" target="_blank" rel="external">https://www.zerocho.com/category/Javascript/post/57433645a48729787807c3fd</a></p><h3 id="Converting-a-JS-object-to-an-array"><a href="#Converting-a-JS-object-to-an-array" class="headerlink" title="Converting a JS object to an array"></a>Converting a JS object to an array</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> charactersBooks = &#123;</span><br><span class="line">    Frodo: <span class="string">"Lord of the Rings"</span>,</span><br><span class="line">    Aslan: <span class="string">"Chronicles of Narnia"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arrayCharacters = <span class="built_in">Object</span>.keys(charactersBooks).map(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;[key]: charactersBooks[key]&#125;;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arrayCharacters); <span class="comment">// [Object, Object]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> length = <span class="built_in">Object</span>.keys(arrayCharacters).length;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(length);</span><br></pre></td></tr></table></figure><p>지금까지 객체의 key값과 value값을 가져와 각각의 빈 배열에 추가하는 방법을 알아봤습니다. 이제는 객체 전체를 배열로 한번에 전환하는 방법을 알아 보도록 하겠습니다. Object.keys().map()을 사용하시면 됩니다. Object.keys() 메소드는 객체의 열거할 수 있는 속성값이 담긴 배열을 리턴합니다. 리턴된 배열은 map()을 통해 조건에 부합하는 새로운 배열을 생성합니다. 이렇게 생선된 배열은 arrayCharacters로 정의된 변수에 저장됩니다. 아래는 map()을 사용해서 객체에 담긴 firstname과 lastname을 가져와 join()을 사용해서 fullname으로 출력하는 방법입니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> persons = [</span><br><span class="line">    &#123;<span class="attr">firstname</span> : <span class="string">"Malcom"</span>, <span class="attr">lastname</span>: <span class="string">"Reynolds"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">firstname</span> : <span class="string">"Kaylee"</span>, <span class="attr">lastname</span>: <span class="string">"Frye"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">firstname</span> : <span class="string">"Jayne"</span>, <span class="attr">lastname</span>: <span class="string">"Cobb"</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// join() method joins the elements of an array into a string, and returns the string.</span></span><br><span class="line">    <span class="keyword">var</span> fullname = [item.firstname,item.lastname].join(<span class="string">" "</span>);</span><br><span class="line">    <span class="keyword">return</span> fullname;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = persons.map(getFullName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Creating-an-array-of-objects"><a href="#Creating-an-array-of-objects" class="headerlink" title="Creating an array of objects"></a>Creating an array of objects</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> journal = [];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEntry</span>(<span class="params">events, didITurnIntoASquirrel</span>) </span>&#123;</span><br><span class="line">journal.push(&#123;</span><br><span class="line">events: events,</span><br><span class="line">squirrel: didITurnIntoASquirrel</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addEntry([<span class="string">"work"</span>, <span class="string">"touched tree"</span>, <span class="string">"pizza"</span>, <span class="string">"running"</span>, <span class="string">"television"</span>], <span class="literal">false</span>);</span><br><span class="line">addEntry([<span class="string">"work"</span>, <span class="string">"touched tree"</span>, <span class="string">"pizza"</span>, <span class="string">"running"</span>, <span class="string">"television"</span>], <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h3 id="call-apply-bind"><a href="#call-apply-bind" class="headerlink" title="call, apply, bind"></a>call, apply, bind</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> example = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;;</span><br><span class="line">example(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">example.call(<span class="literal">null</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">example.apply(<span class="literal">null</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// call()</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  string: <span class="string">'zero'</span>,</span><br><span class="line">  yell: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.string);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  string: <span class="string">'what?'</span></span><br><span class="line">&#125;;</span><br><span class="line">obj.yell(); <span class="comment">// 'zero';</span></span><br><span class="line">obj.yell.call(obj2); <span class="comment">// 'what?'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bind()</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  string: <span class="string">'zero'</span>,</span><br><span class="line">  yell: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.string);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  string: <span class="string">'what?'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> yell2 = obj.yell.bind(obj2);</span><br><span class="line">yell2(); <span class="comment">// 'what?'</span></span><br></pre></td></tr></table></figure><p>참고</p><ul><li><a href="http://blog.kazikai.net/?p=16" target="_blank" rel="external">http://blog.kazikai.net/?p=16</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JSON&quot;&gt;&lt;a href=&quot;#JSON&quot; class=&quot;headerlink&quot; title=&quot;JSON&quot;&gt;&lt;/a&gt;JSON&lt;/h3&gt;&lt;p&gt;JSON is a syntax for storing and exchanging data. JSON is text
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[JS] Inheritance in JavaScript</title>
    <link href="https://shlee1353.github.io/2017/11/15/JS-Inheritance-in-JavaScript/"/>
    <id>https://shlee1353.github.io/2017/11/15/JS-Inheritance-in-JavaScript/</id>
    <published>2017-11-15T01:43:45.000Z</published>
    <updated>2017-11-15T01:46:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="프로토타입-prototype"><a href="#프로토타입-prototype" class="headerlink" title="프로토타입(prototype)"></a>프로토타입(prototype)</h2><p>자바스크립트에는 클래스라는 개념대신 기존의 객체를 복사하여 새로운 객체를 생성하는 프로토타입 언어입니다. 프로토타입은 크게 두 가지로 나뉘어 집니다. 프로토타입 객체를 참조하는 <strong>prototype 속성(Prototype Object)</strong> 과 객체 멤버인 proto 속성이 참조하는 <strong>숨은 링크(Prototype Link)</strong> 입니다. 다시말해, <strong> proto </strong> (숨은링크)는 <strong>상위에서 물려받은 객체의 프로토타입에 대한 정보</strong>이며  prototype 프로퍼티는 <strong>자신을 원형으로 만들어질 새로운 객체들 즉 하위로 물려줄 연결에 대한 속성</strong>입니다.</p><p>자바스크립트에서 함수가 정의될 때 2가지가 일어납니다. 1. 해당함수에 constructor(생성자) 자격부여. 2. 해당 함수의 prototype object 생성 및 연결. 함수를 생성하면 함수 뿐만 아니라 생성된 함수와 연결되는 Prototype Object도 함께 생겨납니다. 이 객체에 접근하려면 prototype 이라는 속성을 통해 가능합니다. 기본속성으로 constructor와 <strong> proto </strong> 를 가지고 있습니다. <strong> proto </strong> 속성은 함수뿐만 아니라 모든 객체가 가지고 있습니다. 객체 생성시 조상이었던 함수의 Prototype Object를 가리킵니다.</p><p><strong>Prototype Object</strong><br>함수를 정의하면 다른 곳에 생성되는 프로토타입 객체는 자신이 다른 객체의 원형이 되는 객체입니다. 모든 객체는 프로토타입 객체에 접근할 수 있습니다. Prototype Object 는 자기 자신의 분신이며 자신을 원형으로 만들어질 다른 객체가 참조할 프로토타입이 됩니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> joon = <span class="keyword">new</span> Person();  </span><br><span class="line"><span class="keyword">var</span> jisoo = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">Person.prototype.getType = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"인간"</span>; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(joon.getType());   <span class="comment">// 인간  </span></span><br><span class="line"><span class="built_in">console</span>.log(jisoo.getType());  <span class="comment">// 인간</span></span><br></pre></td></tr></table></figure></p><p><strong>Prototype Link</strong><br>자바스크립트에서 기본 데이터 타입을 제외한 모든 것이 객체입니다. 객체가 만들어지기 위해서는 자신을 만드는 데 사용된 원형인 프로토타입 객체를 이용하여 객체를 만듭니다. 이때 만들어진 객체 안에 <strong>proto</strong> (비표준) 속성이 자신을 만들어낸 원형을 의미하는 프로토타입 객체를 참조하는 숨겨진 링크가 있습니다. 이 숨겨진 링크를 프로토타입이라고 정의합니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> A = <span class="keyword">new</span> A();</span><br><span class="line"><span class="built_in">console</span>.log(A);</span><br></pre></td></tr></table></figure></p><p>콘솔을 확인해 보면, <strong> proto </strong> 와 constructor 를 주의 깊게 봐야합니다. 해당 객체의 프로토타입은 A라는 함수 객체이며 이 객체의 생성자 역시 function A() 함수이다. 즉, new 를 사용해 만들어진 객체는 function A()를 자신의 프로토타입으로 사용해서 만들어졌습니다.</p><h2 id="상속-Inheritance"><a href="#상속-Inheritance" class="headerlink" title="상속(Inheritance)"></a>상속(Inheritance)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">"annonymous"</span>;</span><br><span class="line"><span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">"Hello, my name is"</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Yoda</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Person();</span><br><span class="line">obj.name = <span class="string">"Yoda"</span>;</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> me = <span class="keyword">new</span> Yoda();</span><br><span class="line">me.sayHello();</span><br><span class="line"><span class="built_in">console</span>.log(me <span class="keyword">instanceof</span> Yoda); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(me <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>초창기 자바스크립트 상속 개념은 2개의 객체가 있을 경우, 하나의 객체에서 다른 객체의 함수 사용을 목적으로한 제한적 상속방법 이였습니다. 예제 코드와 같이 new를 사용해서 obj를 만들고 리턴하는 방법입니다. 하지만, 내부를 살펴보면 me의 인스턴스는 Yoda가 아닌 Person으로 나옵니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">name: <span class="string">"annoymous"</span>,</span><br><span class="line">sayHello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">"Hello, my name is"</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Yoda</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">"Yoda"</span>;</span><br><span class="line">&#125;</span><br><span class="line">Yoda.prototype = person;</span><br><span class="line"><span class="keyword">var</span> yoda = <span class="keyword">new</span> Yoda();</span><br><span class="line">yoda.sayHello();</span><br><span class="line">person.sayHello();</span><br><span class="line"><span class="built_in">console</span>.log(yoda <span class="keyword">instanceof</span> Yoda); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>이러한 문제 때문에 function에서 기본적으로 제공하는 prototype을 이용한 방법이 등장 하였습니다. person을 리터럴 방식으로 생성한 뒤 객체형태로 프로퍼티와 메소드를 입력합니다. 이렇게 하면 yoda는  Yoda의 인스턴스로 true값을 반환합니다. 하지만, person이 함수형태가 아니기 때문에, instanceof Person를 이용한 부모객체 확인이 불가능합니다. 자바스크립트에서 함수가 중요한 이유는 프로토타입 속성을 제공하는 유일한 객체이기 때문입니다. 이해를 돕기위해, 앞으로 계속 등장하는 prototype과  constructor에 대해 간단히 알아 보도록 하겠습니다. <a href="http://www.nextree.co.kr/p7323/" target="_blank" rel="external">http://www.nextree.co.kr/p7323/</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">Car.prototype; <span class="comment">// Object</span></span><br><span class="line"></span><br><span class="line">Car.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span> : function() &#123;&#125;,</span><br><span class="line">  __proto__ : <span class="built_in">Object</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> audi = <span class="keyword">new</span> Car();</span><br><span class="line">audi = &#123;</span><br><span class="line">    __proto__ : &#123;</span><br><span class="line">        <span class="keyword">constructor</span> : function f () &#123;&#125;,</span><br><span class="line">        __proto__ : <span class="built_in">Object</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Car라는 함수(객체)를 생성한 뒤, 내부를 살펴보면, constructor와_proto_가 있습니다. constructor는 car 함수가 생성될 때 사용된 함수객체를 나타내며, _proto_는 현재 프로토타입에 연결된 부모 객체입니다. 여기에 new를 사용하면, 함수의 prototype을 근간으로하는 신규 객체가 반환됩니다. </p><p>자바스크립트의 생성자함수에 대해 좀 더 알아보도록 하겠습니다. 객체(Object)는 Object Literal Notation을 사용해서 생성할 수도 있을 뿐 아니라, Constructor 라는 함수를 이용해서도 생성이 가능합니다. 일반적으로 new Object() 또는 Object Literal Notation을 이용해 생성한 객체들은 모두 자바스크립트 내장 함수인 Object() 라는 객체 생성자(Constructor)함수를 이용해 생성되는 것입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  firstName: <span class="string">"Jason"</span>,</span><br><span class="line">  lastName: <span class="string">"Bourne"</span>,</span><br><span class="line">  age: <span class="number">25</span>  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1.constructor); <span class="comment">//function Object() </span></span><br><span class="line"><span class="built_in">console</span>.log(person2.constructor); <span class="comment">//function Object() </span></span><br><span class="line"><span class="built_in">console</span>.log(person1.constructor == person2.constructor); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> array = [];</span><br><span class="line"><span class="keyword">var</span> number = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> bool = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"String"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array.constructor); <span class="comment">//function Array()</span></span><br><span class="line"><span class="built_in">console</span>.log(number.constructor); <span class="comment">//function Number()</span></span><br><span class="line"><span class="built_in">console</span>.log(bool.constructor); <span class="comment">//function Boolean()</span></span><br><span class="line"><span class="built_in">console</span>.log(str.constructor); <span class="comment">//function String()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">firstName, lastName, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">  <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.getInfo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Name : "</span> + firstName + <span class="string">" "</span> + lastName + <span class="string">"\nAge : "</span> + age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Jason"</span>, <span class="string">"Bourne"</span>, <span class="number">33</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Jenny"</span>, <span class="string">"Laurence"</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1.constructor); <span class="comment">//function Person</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.constructor); <span class="comment">//function Person</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">"annoymous"</span>;</span><br><span class="line"><span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">"Hello, my name is"</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Yoda</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">"Yoda"</span>;</span><br><span class="line">&#125;</span><br><span class="line">Yoda.prototype = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> yoda = <span class="keyword">new</span> Yoda();</span><br><span class="line">yoda.sayHello();</span><br><span class="line"><span class="built_in">console</span>.log(yoda <span class="keyword">instanceof</span> Yoda); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(yoda <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>다시 상속으로 돌아와서, prototype을 new로 생성하여 Yoda.prototype으로 지정하는 방법이 있습니다. 이럴경우, yoda는 Yoda와 Person의 인스턴스로 확인이 가능합니다. 하지만, 여기에도 문제가 있습니다. 실제 생성자는 Yoda임에도 불구하고 내부 constructor은 일치하지 않습니다. 그럼에도 불구하고, instanceof를 확인해보면 둘다 true가 나오는데 이러한 이유는 instanceof는 prototype을 기반으로 작동하기 때문입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.create = <span class="function"><span class="keyword">function</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">F.prototype = o;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Constructor를 제대로 연결하기 위해 Object.create()가 표준으로 등장하였으며, IE9 이상부터 사용이 가능합니다. 이 함수는 prototype을 인자로 받아 기본함수 F의 prototype()으로 설정을 한 뒤 new 명령어를 통해 새로운 객체를 리턴합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">"annoymous"</span>;</span><br><span class="line"><span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">"Hello, my name is"</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Yoda</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   Person.call(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">"Yoda"</span>;</span><br><span class="line">&#125;</span><br><span class="line">Yoda.prototype = <span class="built_in">Object</span>.create(Person.prototype);</span><br><span class="line">Yoda.prototype.constructor = Yoda;</span><br><span class="line"><span class="keyword">var</span> yoda = <span class="keyword">new</span> Yoda();</span><br><span class="line">yoda.sayHello();</span><br></pre></td></tr></table></figure><p>우선 Object.create()를 사용하여 Person.prototype을 상속받습니다. 다음으로, constructor를 Yoda 로 재선언 해준 뒤, call()를 사용하여 조상 메소드에 접근이 가능합니다. 결국, 자바스크립트는 상속은 생성자와 프로토타입에 기반을 두고 있습니다. ES6 에서는 클래스를 사용하여 이를 간단히 표현할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span> (name, age) &#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">printProfile() &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES6 문법으로 작성한 위 내용은 결국 아래와 같습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.printProfile = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES6에서 클래스 상속 구현은 extends 절과 super 키워드를 사용하여 구현합니다. extends 절은 클래스가 다른 생성자의 정적/비정적 프로퍼티를 상속 가능하게 합니다. super 키워드는 클래스 constructor 메소드에서 부모 생성자를 호출하거나, 클래스 메소드 내부에서 부모 생성자의 정적/비정적 메소드를 참조할 때 사용합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span> (name, type) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.type = type;</span><br><span class="line">  &#125;</span><br><span class="line">  getName () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">  getType () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.type;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (name) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name, <span class="string">'car'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  getName () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'It is a car: '</span> + <span class="keyword">super</span>.getName();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> car = <span class="keyword">new</span> Car(<span class="string">'Tesla'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(car.getName()); <span class="comment">// It is a car: Tesla</span></span><br><span class="line"><span class="built_in">console</span>.log(car.getType()); <span class="comment">// car</span></span><br></pre></td></tr></table></figure><p>상속의 예시를 살펴보면, Vehicle 의 프로퍼티값으로 name과 type이 있으며, getName(), getType() 두 메소드를 가지고 있습니다. Car는 extends와 super()를 사용하여 Vehicle를 상속받아 car라는 인스턴스를 생성하였습니다.  이 과정에서 getName()은 Car 내부에서 다시 정의가 되었습니다. 마지막에 생성된 car는 Vehicle과 Car의 메소드에 접근할 수 있습니다. 자바스크립트 상속과정을 설명하면서 this가 많이 나왔는데요, 이것도 간단히 정리해보도록 하겠습니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> greeting = <span class="string">'hello'</span>; </span><br><span class="line">&#125; </span><br><span class="line">alert(greeting); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></p><p>자바스크립트에서 함수는 위와같이 유호범위(scope)를 생성합니다. 현재 코드에서는, 외부에서 접근이 불가능합니다. 컨텍스트(context)는 내부에서 코드가 돌아가는 객체를 의미합니다. 이때, this를 사용해서 컨텍스트를 참조할 수 있습니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function 내부 컨텍스트</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">f(); <span class="comment">// window(전역객체)를 가리킴</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 메소드 내부 컨텍스트</span></span><br><span class="line"><span class="keyword">var</span> oj = &#123;</span><br><span class="line">    method : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">oj.method(); <span class="comment">// 메소드를 담은 객체를 가리킴</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 메소드 내부에 중첩된 함수의 컨텍스트</span></span><br><span class="line"><span class="keyword">var</span> oj = &#123;</span><br><span class="line">    method : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">inner</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);  <span class="comment">// window(전역객체)를 가리킴</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>참고</p><ul><li><a href="https://medium.com/@bluesh55/javascript-prototype-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-f8e67c286b67" target="_blank" rel="external">https://medium.com/@bluesh55/javascript-prototype-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-f8e67c286b67</a></li><li><a href="http://insanehong.kr/post/javascript-prototype/" target="_blank" rel="external">http://insanehong.kr/post/javascript-prototype/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;프로토타입-prototype&quot;&gt;&lt;a href=&quot;#프로토타입-prototype&quot; class=&quot;headerlink&quot; title=&quot;프로토타입(prototype)&quot;&gt;&lt;/a&gt;프로토타입(prototype)&lt;/h2&gt;&lt;p&gt;자바스크립트에는 클래스라는 개
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[React] Redux Core Concept</title>
    <link href="https://shlee1353.github.io/2017/11/15/React-Redux-Core-Concept/"/>
    <id>https://shlee1353.github.io/2017/11/15/React-Redux-Core-Concept/</id>
    <published>2017-11-15T01:38:31.000Z</published>
    <updated>2017-11-15T01:40:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Redux"><a href="#Redux" class="headerlink" title="Redux?"></a>Redux?</h3><p><strong>Redux</strong> is a state management library that lets you connect directly to application state from anywhere in your app. It also allows you manipulate application state from anywhere in your app. But, to work its magic, Redux requires that your app have a single data store.</p><p>리덕스는 자바스크립트 앱의 상태를 포함하고 있는 컨테이너입니다. Redux store라고 부릅니다. 애플리케이션의 모든 상태를 불변의 객체 트리에 저장합니다. 리덕스는 createStore(reducer, [initialState], [enhancer]) 명령어를 통해 생성할 수 있습니다. 사실, 리덕스는 React뿐만 아니라, Angular, Ember, Vue.js 에도 사용이 가능합니다. Redux를 React와 사용할 때 가장 쉬운 방법은 React Redux 바인딩 라이브러리를 사용하는 것입니다. 이 라이브러리를 사용하면 리덕스 상태와 액션을 props와 쉽게 연결 할 수 있습니다.</p><h3 id="Why-do-we-need-Redux"><a href="#Why-do-we-need-Redux" class="headerlink" title="Why do we need Redux?"></a>Why do we need Redux?</h3><p>You can’t pass a property directly to the component or components that you wish to target. The reason has to do with how React works. React enforces a chain of command where properties have to flow down from a parent component to an immediate child component. (<a href="https://www.kirupa.com/react/transferring_properties.htm" target="_blank" rel="external">Link</a>)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">var Display = React.createClass(&#123;</span><br><span class="line">  render: function() &#123;</span><br><span class="line">    return(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;&#123;this.props.color&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;this.props.num&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;this.props.size&#125;&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">var Label = React.createClass(&#123;</span><br><span class="line">  render: function() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;Display color=&#123;this.props.color&#125;</span><br><span class="line">              num=&#123;this.props.num&#125;</span><br><span class="line">              size=&#123;this.props.size&#125;/&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">var Shirt = React.createClass(&#123;</span><br><span class="line">  render: function() &#123;</span><br><span class="line">      return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;Label color=&#123;this.props.color&#125;</span><br><span class="line">                 num=&#123;this.props.num&#125;</span><br><span class="line">                 size=&#123;this.props.size&#125;/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Shirt color=&quot;steelblue&quot; num=&quot;3.14&quot; size=&quot;medium&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;,</span><br><span class="line">  document.querySelector(&quot;#container&quot;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p><strong>Spread Operator</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var items = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;];</span><br><span class="line"> </span><br><span class="line">function printStuff(a, b, c) &#123;</span><br><span class="line">  console.log(&quot;Printing: &quot; + a + &quot; &quot; + b + &quot; &quot; + c);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// using the spread operator</span><br><span class="line">printStuff(...items);</span><br><span class="line"> </span><br><span class="line">// without using the spread operator</span><br><span class="line">printStuff(items[0], items[1], items[2]);</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">var Display = React.createClass(&#123;</span><br><span class="line">  render: function() &#123;</span><br><span class="line">    return(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;&#123;this.props.color&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;this.props.num&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;this.props.size&#125;&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">var Label = React.createClass(&#123;</span><br><span class="line">  render: function() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;Display &#123;...this.props&#125;/&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">var Shirt = React.createClass(&#123;</span><br><span class="line">  render: function() &#123;</span><br><span class="line">      return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;Label &#123;...this.props&#125;/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Shirt color=&quot;steelblue&quot; num=&quot;3.14&quot; size=&quot;medium&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;,</span><br><span class="line">  document.querySelector(&quot;#container&quot;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>It’s not good practice to have all components connect to application state. It is best to have parent/container components connect to state and pass state directly to children.</p><h2 id="Redux의-4-가지-메서드"><a href="#Redux의-4-가지-메서드" class="headerlink" title="Redux의 4 가지 메서드"></a>Redux의 4 가지 메서드</h2><ul><li>store.getState() - 현재 상태 객체 트리를 리턴.</li><li>store.dispatch(action) - 상태를 바뀌기 위히 액션을 보냄.</li><li>store.subscribe(listener) - 상태 트리에서 변화를 감지.</li><li>store.replaceReducer(nextReducer) - 현재 리듀서를 다른 것으로 교체 (advanced).</li></ul><h3 id="Redux-3가지-원칙"><a href="#Redux-3가지-원칙" class="headerlink" title="Redux 3가지 원칙"></a>Redux 3가지 원칙</h3><ul><li>애플리케이션의 state를 위해 단 한개의 store를 사용합니다.</li><li>애플리케이션에서 store의 state를 직접 변경할 수 없습니다. state를 변경하기 위해선 무조건 action 이 dispatch 되어야 합니다.</li><li>action 객체를 처리하는 순수함수를 reducer 라고 부릅니다. reducer는 정보(현재 상태 트리와 액션)를 받아서 어떻게 업데이트 할 지 정의합니다. reducer는 순수함수로 작성되어야 합니다. 즉, 네트워크 및 데이터베이스 접근 불가, 인수 변경 불가. 순수하지않은 API 사용불가 Date.now() Math.random()</li></ul><h3 id="카툰-안내서"><a href="#카툰-안내서" class="headerlink" title="카툰 안내서"></a>카툰 안내서</h3><p><a href="http://bestalign.github.io/2015/10/26/cartoon-intro-to-redux/" target="_blank" rel="external">http://bestalign.github.io/2015/10/26/cartoon-intro-to-redux/</a></p><ul><li><strong>액션 생성자(action creators)</strong>: 애플리케이션의 상태를 바꾸고 싶다면 항상 액션을 보내야만 하며 유일한 방법입니다.</li><li><strong>스토어(store)</strong>: 상태트리(state tree) 전체를 유지하는 책임을 지며, 액션이 들어왔을 때 어떤 상태변화가 필요한지에 대한일은 reducer에게 위임한다.</li><li><strong>리듀셔(the reducers)</strong>: 스토어는 액션이 어떤 상태 변화를 만드는지 알 필요가 있을 때 리듀서에게 묻는다. 리듀서는 넘겨받은 예전 상태를 변경하지 않고 새로운 복사본을 만든 후 모든 변경사항을 적용한다. 리듀서는 복사되고 업데이트된 상태 객체를 루트 리듀서에게 넘겨주고, 루트 리듀서는 이 객체를 스토어로 보낸다.</li><li><strong>똑똑한 컴포넌트</strong>: 액션 처리를 책임진다. 자기 자신의 CSS style을 가지지 않는다. 자신의 DOM을 거의 가지고 있지 않는다.</li><li><strong>뷰 레이어 바인딩(the view layer binding)</strong>: 스토어를 뷰에 연결하기 위한 도움장치.</li></ul><h3 id="동작방법"><a href="#동작방법" class="headerlink" title="동작방법"></a>동작방법</h3><ol><li>스토어를 준비: 루트 컴포넌트는 createStore()를 이용해서 스토어를 생성하고 무슨 리듀서를 사용할지 알려준다. 필요한 모든 리듀서를 combineReducers()를 이용해서 하나로 묶는다.</li><li>루트 컴포넌트는 공급 컴포넌트로 서브 컴포넌트를 감싸고 스토어와 공급 컴포넌트 사이를 연결한다. 똑똑한 컴포넌트는 connect()로 네트워크에 연결한다. 이를 통해 상태 업데이트를 받을 수 있게 만든다.</li><li>액션콜백 준비: 멍청한 컴포넌트가 액션과 쉽게 일할 수 있게 bindActionCreators()로 액션 콜백을 준비.</li></ol><h3 id="데이터흐름"><a href="#데이터흐름" class="headerlink" title="데이터흐름"></a>데이터흐름</h3><ol><li>뷰가 액션을 요청한다. (<a href="http://makeitopen.com/static/images/redux_flowchart.png" target="_blank" rel="external">Image</a>)</li><li>bindActionCreators()가 준비과정에서 사용되었으면 자동으로 액션이 보내진다.</li><li>스토어가 액션을 받는다. 현재 애플리케이션 상태 트리와 액션을 루트 리듀서에게 보낸다.</li><li>루트 리듀서는 상태 트리를 조각으로 나눈 뒤 알맞은 서브 리듀서로 상태 조각들을 넘겨준다.</li><li>서브 리듀서는 받은 상태 조각을 복사한 뒤, 그 복사본을 변경한다. 루트 리듀서에게 변경된 복사본을 돌려준다.</li><li>모든 변경된 조각들을 돌려주면, 루트 리듀서는 조각들을 하나로 모아 상태 트리로 만든 뒤 스토어로 돌려준다. 스토어는 새로운 상태 트리를 옛날 상태 트리와 바꾼다.</li><li>스토어는 뷰 레이어 바인딩에게 애플리케이션 상태가 변경되었다는 것을 알린다.</li><li>뷰 레이어 바인딩은 스토어에게 새로운 상태를 보내달라고 요청한다.</li><li>뷰 레이어 바인딩은 뷰에게 화면을 업데이트하도록 요청한다.</li></ol><h3 id="프로젝트-준비"><a href="#프로젝트-준비" class="headerlink" title="프로젝트 준비"></a>프로젝트 준비</h3><p><a href="https://www.youtube.com/watch?v=rNhstoL9MME&amp;list=PL9FpF_z-xR_GMujql3S_XGV2SpdfDBkeC&amp;index=23" target="_blank" rel="external">https://www.youtube.com/watch?v=rNhstoL9MME&amp;list=PL9FpF_z-xR_GMujql3S_XGV2SpdfDBkeC&amp;index=23</a></p><p>폴더구조<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">    ㄴactions</span><br><span class="line">        ㄴActionTypes.js</span><br><span class="line">        ㄴindex.js</span><br><span class="line">    ㄴcomponents</span><br><span class="line">        ㄴApp.js</span><br><span class="line">        ㄴControl.js</span><br><span class="line">        ㄴCounter.js</span><br><span class="line">        ㄴValue.js</span><br><span class="line">    ㄴreducers</span><br><span class="line">        ㄴcounter.js</span><br><span class="line">        ㄴindex.js</span><br><span class="line">        ㄴui.js</span><br><span class="line">    ㄴindex.js</span><br></pre></td></tr></table></figure></p><h3 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h3><p>리덕스로 보내질 객체를 리턴합니다. 리턴되는 객체는 dispatch 될 때 인자로 전달됩니다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//ActionTypes.js</span><br><span class="line">export const INCREMENT = &quot;INCREMENT&quot;;</span><br><span class="line">export const DECREMENT = &quot;DECREMENT&quot;;</span><br><span class="line">export const SET_COLOR = &quot;SET_COLOR&quot;;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//index.js</span><br><span class="line">import * as types from &apos;./ActionTypes&apos;;</span><br><span class="line"></span><br><span class="line">export function increment() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        type: types.INCREMENT</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function decrement() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        type: types.DECREMENT</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function setColor(color) &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        type: types.SET_COLOR,</span><br><span class="line">        color</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="components"><a href="#components" class="headerlink" title="components"></a>components</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//App.js</span><br><span class="line">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class="line">import Counter from &apos;./Counter&apos;;</span><br><span class="line"></span><br><span class="line">class App extends Component &#123;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        return(</span><br><span class="line">            &lt;Counter/&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">//Control.js</span><br><span class="line">import React, &#123; Component, PropTypes &#125; from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">const propTypes = &#123;</span><br><span class="line">    onPlus: PropTypes.func,</span><br><span class="line">    onSubtract: PropTypes.func,</span><br><span class="line">    onRandomizeColor: PropTypes.func</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function createWarning(funcName) &#123;</span><br><span class="line">    return () =&gt; console.warn(funcName + &apos; is not defined&apos;);</span><br><span class="line">&#125;</span><br><span class="line">const defaultProps = &#123;</span><br><span class="line">    onPlus: createWarning(&apos;onPlus&apos;),</span><br><span class="line">    onSubtract: createWarning(&apos;onSubtract&apos;),</span><br><span class="line">    onRandomizeColor: createWarning(&apos;onRandomizeColor&apos;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Control extends Component &#123;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        return(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button onClick=&#123;this.props.onPlus&#125;&gt;+&lt;/button&gt;</span><br><span class="line">                &lt;button onClick=&#123;this.props.onSubtract&#125;&gt;-&lt;/button&gt;</span><br><span class="line">                &lt;button onClick=&#123;this.props.onRandomizeColor&#125;&gt;Randomize Color&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Control.propTypes = propTypes;</span><br><span class="line">Control.defaultProps = defaultProps;</span><br><span class="line"></span><br><span class="line">export default Control;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">//Counter.js</span><br><span class="line">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">import Value from &apos;./Value&apos;;</span><br><span class="line">import Control from &apos;./Control&apos;;</span><br><span class="line">import &#123; connect &#125; from &apos;react-redux&apos;;</span><br><span class="line">// import &#123; connect, bindActionCreators &#125; from &apos;redux&apos;;</span><br><span class="line"></span><br><span class="line">import * as actions from &apos;../actions&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Counter extends Component &#123;</span><br><span class="line"></span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.setRandomColor = this.setRandomColor.bind(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setRandomColor() &#123;</span><br><span class="line">        const color = [</span><br><span class="line">            Math.floor((Math.random()*55) + 200),</span><br><span class="line">            Math.floor((Math.random()*55) + 200),</span><br><span class="line">            Math.floor((Math.random()*55) + 200)</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        this.props.handleSetColor(color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line"></span><br><span class="line">        const color = this.props.color;</span><br><span class="line">        const style = &#123;</span><br><span class="line">            background: `rgb($&#123;color[0]&#125;, $&#123;color[1]&#125;, $&#123;color[2]&#125;)`</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        return(</span><br><span class="line">            &lt;div style=&#123;style&#125;&gt;</span><br><span class="line">                &lt;Value number=&#123;this.props.number&#125;/&gt;</span><br><span class="line">                &lt;Control</span><br><span class="line">                    onPlus=&#123;this.props.handleIncrement&#125;</span><br><span class="line">                    onSubtract=&#123;this.props.handleDecrement&#125;</span><br><span class="line">                    onRandomizeColor=&#123;this.setRandomColor&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const mapStateToProps = (state) =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        number: state.counter.number,</span><br><span class="line">        color: state.ui.color</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const mapDispatchToProps = (dispatch) =&gt; &#123;</span><br><span class="line">    //return bindActionCreators(actions, dispatch);</span><br><span class="line">    return &#123;</span><br><span class="line">        handleIncrement: () =&gt; &#123; dispatch(actions.increment())&#125;,</span><br><span class="line">        handleDecrement: () =&gt; &#123; dispatch(actions.decrement())&#125;,</span><br><span class="line">        handleSetColor: (color) =&gt; &#123; dispatch(actions.setColor(color))&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 두 개의 인수를 받으며 리덕스 스토어와 컴포넌트를 연결하는 함수를 반환합니다.</span><br><span class="line">export default connect(mapStateToProps, mapDispatchToProps)(Counter);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//Value.js</span><br><span class="line">import React, &#123; Component, PropTypes &#125; from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">const propTypes = &#123;</span><br><span class="line">    number: PropTypes.number</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const defaultProps = &#123;</span><br><span class="line">    number: -1</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Value extends Component &#123;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        return(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h1&gt;&#123;this.props.number&#125;&lt;/h1&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Value.propTypes = propTypes;</span><br><span class="line">Value.defaultProps = defaultProps;</span><br><span class="line"></span><br><span class="line">export default Value;</span><br></pre></td></tr></table></figure><h3 id="reducers"><a href="#reducers" class="headerlink" title="reducers"></a>reducers</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//counter.js</span><br><span class="line">import * as types from &apos;../actions/ActionTypes&apos;;</span><br><span class="line">// 애플리케이션의 초기 상태를 나타냅니다.</span><br><span class="line">const initialState = &#123;</span><br><span class="line">    number: 0,</span><br><span class="line">    dummy: &apos;dumbdumb&apos;,</span><br><span class="line">    dumbObject: &#123;</span><br><span class="line">        d: 0,</span><br><span class="line">        u: 1,</span><br><span class="line">        m: 2,</span><br><span class="line">        b: 3</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default function counter(state = initialState, action) &#123;</span><br><span class="line">    /* ... */</span><br><span class="line">    switch(action.type) &#123;</span><br><span class="line">        case types.INCREMENT:</span><br><span class="line">            return &#123;</span><br><span class="line">                ...state,</span><br><span class="line">                number: state.number + 1,</span><br><span class="line">                dumbObject: &#123; ...state.dumbObject, u: 0 &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        case types.DECREMENT: </span><br><span class="line">            return &#123;</span><br><span class="line">                ...state,</span><br><span class="line">                number: state.number - 1</span><br><span class="line">            &#125;;</span><br><span class="line">        default:</span><br><span class="line">            return state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//index.js</span><br><span class="line">import &#123; combineReducers &#125; from &apos;redux&apos;;</span><br><span class="line">import counter from &apos;./counter&apos;;</span><br><span class="line">import ui from &apos;./ui&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const reducers = combineReducers(&#123;</span><br><span class="line">    counter, ui</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default reducers;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//ui.js</span><br><span class="line">import * as types from &apos;../actions/ActionTypes&apos;;</span><br><span class="line"></span><br><span class="line">const initialState = &#123;</span><br><span class="line">    color: [255, 255, 255]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default function ui(state = initialState, action) &#123;</span><br><span class="line">    if(action.type === types.SET_COLOR) &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            color: action.color</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import ReactDOM from &apos;react-dom&apos;;</span><br><span class="line"></span><br><span class="line">import App from &apos;./components/App&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; createStore &#125; from &apos;redux&apos;;</span><br><span class="line">import reducers from &apos;./reducers&apos;;</span><br><span class="line"></span><br><span class="line">//Provider 컴포넌트는 React store를 모든 자식 컴포넌트에 제공</span><br><span class="line">import &#123; Provider &#125; from &apos;react-redux&apos;;</span><br><span class="line"></span><br><span class="line">//스토어를 생성하여 상태변화를 감지할 수 있으며 액션을 보낼 수 있음</span><br><span class="line">const store = createStore(reducers);</span><br><span class="line"></span><br><span class="line">console.log(store.getState());</span><br><span class="line">store.subscribe(() =&gt; console.log(store.getState()));</span><br><span class="line">store.dispatch(actions.increment());</span><br><span class="line">store.dispatch(actions.decrement());</span><br><span class="line">store.dispatch(actions.setColor([200, 200, 200]));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">        &lt;App/&gt;</span><br><span class="line">    &lt;/Provider&gt;,</span><br><span class="line">    document.getElementById(&apos;root&apos;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>sources</p><ul><li><a href="https://github.com/shlee1353/phostalgia/tree/demo" target="_blank" rel="external">https://github.com/shlee1353/phostalgia/tree/demo</a> (advanced example)</li><li><a href="http://lorenstewart.me/2016/11/27/a-practical-guide-to-redux/" target="_blank" rel="external">http://lorenstewart.me/2016/11/27/a-practical-guide-to-redux/</a></li><li><a href="https://www.kirupa.com/react/transferring_properties.htm" target="_blank" rel="external">https://www.kirupa.com/react/transferring_properties.htm</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Redux&quot;&gt;&lt;a href=&quot;#Redux&quot; class=&quot;headerlink&quot; title=&quot;Redux?&quot;&gt;&lt;/a&gt;Redux?&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Redux&lt;/strong&gt; is a state management library tha
      
    
    </summary>
    
    
  </entry>
  
</feed>
