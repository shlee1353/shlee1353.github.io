{"meta":{"title":"Ryan Lee","subtitle":null,"description":null,"author":"Ryan Lee","url":"https://shlee1353.github.io"},"pages":[],"posts":[{"title":"뷰(Vue) 기본개념 빠르게 알아보자","slug":"vue-quick-start","date":"2019-07-04T10:01:00.000Z","updated":"2019-07-04T10:02:03.553Z","comments":true,"path":"2019/07/04/vue-quick-start/","link":"","permalink":"https://shlee1353.github.io/2019/07/04/vue-quick-start/","excerpt":"","text":"설치12sudo npm install -g vue-clivue init simple hellovuejs // 애플리케이션 생성 애플리케이션을 생성하고 index.html 파일을 아래처럼 수정하도록 하겠습니다. 리액트나 앵귤러와 달리 초기 환경설정이 매우 간편하다는 장점이 있습니다. 1234567891011121314151617181920212223&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;02-01&lt;/title&gt; &lt;script src=\"https://unpkg.com/vue/dist/vue.min.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"simple\"&gt; &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt; &lt;/div&gt; &lt;script type=\"text/javascript\"&gt; var model = &#123; message : \"첫 번째 Vue.js 앱 입니다!\" &#125;; var simple = new Vue(&#123; el : '#simple', data : model &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; Vue.js 는 기본적으로 MVVM 디자인 패턴을 사용하고 있습니다. 1234// View&lt;div id=\"simple\"&gt; &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;&lt;/div&gt; View는 화면상에 보여지는 영역이며 중괄호 두개를 사용하여 데이터 값과 연동됩니다. 12345678910// View Modelvar simple = new Vue(&#123; el : '#simple', data : model&#125;)// Modelvar model = &#123; message : \"첫 번째 Vue.js 앱 입니다!\"&#125;; 모델(Model)을 변경하면 뷰모델(ViewModel) 객체를 통해 HTML DOM이 즉시 변경됩니다. index.html 파일을 실행 한 뒤 콘솔 창을 띄웁니다. 그 다음 아래 코드를 넣어주시면, 화면상에서 바로 값이 반영되는 것을 확인 할 수 있습니다. 1model.message = \"hello Vue.js\"; 기본 디렉티브 미리 선언해 놓은 디렉티브를 사용하면 좀 더 효율적으로 Vue.js를 사용하실 수 있습니다. v-text v-text는 이전에 사용한 중괄호 두개와 같은 기능을 하며 자바스크립트의 innerText 속성과 연결됩니다. (사용권장) 123&lt;div id=\"simple\"&gt; &lt;h2 v-text=\"message\"&gt;&lt;/h2&gt;&lt;/div&gt; v-html 예시 v-html은 innerHTML 속성과 연결되며 태그 문자열을 파싱하여 화면에 나타냅니다. 123&lt;div id=\"simple\"&gt; &lt;h2 v-html=\"message\"&gt;&lt;/h2&gt;&lt;/div&gt; v-bind 예시 v-bind는 요소 객체의 속성들을 단방향 바인딩 하기위해 사용합니다. 1234567&lt;input id=\"a\" type=\"text\" v-bind:value=\"message\"&gt;&lt;img v-bind:src=\"imagePath\" /&gt;var model = &#123; message : 'v-bind 디렉티브', imagePath : 'http://sample.bmaster.kro.kr/photos/61.jpg'&#125;; v-model 예시, 예시 앞에서 살펴본 단방향 바인딩은 HTML 요소에서 값을 변경하더라도 모델 객체의 값이 바뀌지 않습니다. v-model은 요소에서 변경한 값이 모델 객체에 반영되는 양방향 바인딩을 제공합니다. 12345678&lt;input type=\"text\" v-model=\"name\" placeholder=\"이름을 입력하세요\" /&gt;입력된 이름 : &lt;h2 v-html=\"name\"&gt;&lt;/h2&gt;var twoway = new Vue(&#123; el : '#simple', data : &#123; name : ''&#125; v-model 디렉티브는 텍스트 박스뿐만 아니라 다양한 입력 폼 필드에서도 사용 가능합니다. 링크 되어 있는 예시코드를 살펴보면 배열 fruits을 가지고 있는 model을 두 개의 Vue 객체(#simple1, #simple2)에서 참조합니다. 1234567891011&lt;input type=\"checkbox\" value=\"1\" v-model=\"fruits\"&gt;사과, &lt;input type=\"checkbox\" value=\"2\" v-model=\"fruits\"&gt;키위, &lt;input type=\"checkbox\" value=\"3\" v-model=\"fruits\"&gt;포도,&lt;input type=\"checkbox\" value=\"4\" v-model=\"fruits\"&gt;수박,&lt;input type=\"checkbox\" value=\"5\" v-model=\"fruits\"&gt;참외선택한 과일들 : &lt;span v-html=\"fruits\"&gt;&lt;/span&gt;var model = &#123; fruits : []&#125; v-show 예시,v-if 예시 v-show, v-if는 Vue 객체의 data 속성 값에 따라 렌더링 여부를 결정하는 기능입니다. 둘의 차이점은 v-show는 일단 HTML 요소를 렌더링한 후에 display 속성으로 화면단을 제어합니다. v-if 디렉티브는 조건에 부합되지 않으면 렌더링을 하지 않습니다. 자주 화면이 변경되는 부분에 대해서는 v-show 디렉티브를 사용하는 것이 바람직합니다. 12345678// v-show&lt;input type=\"text\" v-model=\"amount\" /&gt;&lt;img v-show=\"amount &lt; 0\" /&gt;// v-if&lt;input type=\"text\" v-model=\"balance\" /&gt;&lt;span v-if=\"balance &gt;= 1000000\"&gt;Gold&lt;/span&gt;&lt;span v-else-if=\"balance &gt;= 500000\"&gt;Silver&lt;/span&gt; v-for 예시, 예시 반복적인 데이터 렌더링을 하기 위해 v-for 디렉티브를 사용합니다. 예시코드를 확인하면 model에서 contacts 배열을 가져와 화면에 보여주고 있습니다. 123456&lt;tr v-for=\"(contact, index) in contacts\"&gt; &lt;td&gt;&#123;&#123;index+1&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;contact.name&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;contact.tel&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;contact.address&#125;&#125;&lt;/td&gt;&lt;/tr&gt; 객체인 경우는 키를 이용해 값에 접근합니다. 1&lt;option v-for=\"(val, key, index) in regions\" v-bind:value=\"key\"&gt;&#123;&#123; index+1 &#125;&#125; : &#123;&#123;val&#125;&#125;&lt;/option&gt; 기타 디렉티브 및 계산형 속성v-pre 예시,v-once 예시 v-pre 디렉티브는 HTML 요소에 대한 컴파일을 수행하지 않습니다. v-once 디렉티브는 HTML 요소를 단 한 번만 렌더링하기 때문에 데이터를 변경하더라도 다시 렌더링되지 않습니다. 계산형 예시 연산 로직이 필요할 경우 계산형 속성(Computed Property)를 사용해하여 필요한 함수를 등록할 수 있습니다. 함수 안에서 this는 Vue 객체 자신을 참조합니다. num 값이 문자열로 다루어지기 때문에 Number(), parseInt() 함수를 사용해서 명시적으로 숫자로 변환해주어야 합니다. 1234567computed : &#123; sum : function() &#123; var n = Number(this.num); if (Number.isNaN(n) || n &lt; 1) return 0; return ((1+n) * n) / 2; &#125;&#125; Vue.js도 리액트 처럼 렌더링 속도 향상을 위해 가상DOM을 사용합니다. 가상 DOM에 대한 간단한 영상 Vue 인스턴스el, data, computed Vue 인스턴스에는 el, data, computed 옵션이 있습니다. 먼저 data 옵션에 주어진 모든 속성들은 Vue 인스턴스 내부에서 직접 이용되지 않고 Vue 인스턴스와 Data 옵션에 주어진 객체 사이에 프록시를 두어 처리합니다. 그래서 값에 접근할 때 vm.name으로 가능합니다. 직접 data에 접근하려면 vm.$data.name 방법이 있습니다. 1234567var model = &#123; name : \"Ryan\"&#125;var vm = new Vue(&#123; el : '#test', data : model&#125;) el 옵션은 Vue 인스턴스에 연결할 HTML DOM요소를 지정하며 여러개 요소에 지정할 수 없습니다. Computed 옵션에 지정한 것은 함수였지만 Vue 인스턴스는 프록시 처리하여 마치 속성처럼 취급합니다. 메서드 Vue 인스턴스에서 사용할 메서드를 등록하는 옵션입니다. 직접호출, 디렉티브 포현식, 콧수염 표현식에서도 사용할 수 있습니다. 계산형 속성과 차이가 있다면 결과값의 캐싱 여부입니다. 메서드는 캐싱없이 매번 실행합니다. 12345678910&lt;span&gt;&#123;&#123;sum()&#125;&#125;&lt;/span&gt;..methods : &#123; sum : function() &#123; var n = Number(this.num); if (Number.isNaN(n) || n &lt; 1) return 0; return ((1+n)*n)/2; &#125;&#125; 관찰속성 관찰속성은 긴 처리 시간이 필요한 비동기 처리에 적합하다는 특징을 가지고 있습니다. 컴포넌트 심화전역 컴포넌트 12345678910111213141516171819202122// HTML&lt;div id=\"example\"&gt; &lt;my-component&gt;&lt;/my-component&gt;&lt;/div&gt;..// JS// 등록Vue.component('my-component', &#123; template: '&lt;div&gt;사용자 정의 컴포넌트 입니다!&lt;/div&gt;'&#125;)// 루트 인스턴스 생성new Vue(&#123; el: '#example'&#125;)..// 랜더링 결과&lt;div id=\"example\"&gt; &lt;div&gt;사용자 정의 컴포넌트 입니다!&lt;/div&gt;&lt;/div&gt; 단일 컴포넌트와 전역 컴포넌트의 차이점 &#60;template&#62; 에는 id 특서을 부여하지 않음 &#60;script&#62; 영역에서는 Vue 컴포넌트의 template을 지정하지 않음 Vue.component()로 이름과 template 속서을 지정하지 않음 단일 컴포넌트는 name 속성을 지정해 반드시 객체를 export 해야함 컴포넌트에서 사용할 스타일은 &#60;style&#62; 내부에 작성 전역 수준 컴포넌트의 문제점 빌드 단계가 없으므로 최신 자바스크립트 문법을 사용할 수 없습니다. CSS 스타일을 빌드하고 모듈화할 수 있는 기능을 제공하지 않습니다. 컴포넌트 템플릿 작성시 HTML 파일안에 여러개의 &#60;template &#47;&#62; 태그가 작성되어야 하기 때문에 식별이 어렵습니다. Vue-CLI가 제공하는 프로젝트 템플릿 중 webpack-simple에 포함되어 있는 vue-loader라는 구성 요소가 단일 파일 컴포넌트를 지원합니다. 확장자가 .vue인 파일에 &#60;template &#47;&#62;, &#60;script &#47;&#62;, &#60;style &#47;&#62; 을 작성하면 vue-loader는 이 파일을 파싱하고 다른 로더들을 활용해 하나의 모듈로 조합합니다. 특히, css-loader를 이용해 CSS 스타일을 전처리할 수 있으며, 스타일 정보를 모듈화할 수도 있습니다. App.vue 파일을 열어보면 &#60;template &#47;&#62;, &#60;script &#47;&#62;, &#60;style &#47;&#62; 3개의 기본 영역을 확인할 수 있습니다. App.vue 컴포넌트를 화면에 담기 위해 main.js를 사용합니다. 1234567import Vue from 'vue'import TodoList from './components/TodoList.vue'new Vue(&#123; el: '#app', render: h =&gt; h(TodoList)&#125;) App.vue를 비롯한 .js 파일들은 트랜스파일되고, 번들링되어 ./dist/build.js 파일을 생성하여 최종적으로 index.html 파일에 보여집니다. 1234567891011&lt;!DOCTYPE html&gt;&lt;html lang=\"ko\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;todolistapp&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"app\"&gt;&lt;/div&gt; &lt;script src=\"/dist/build.js\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 본격적으로, 예제로 살펴볼 todolistapp 디렉토리와 파일구조는 다음과 같습니다. 12345678src ㄴcomponents ㄴEventBus.vue ㄴInputTodo.vue ㄴList.vue ㄴTodoList.vue ㄴmain.jsindex.html 1.EventBus.vue 12345&lt;script type=\"text/javascript\"&gt; import Vue from 'vue'; var eventBus = new Vue(); // 이벤트버스 생성 export default eventBus;&lt;/script&gt; 2.InputTodo.vue 12345678910111213141516171819202122232425&lt;style&gt;...&lt;/style&gt;&lt;template&gt; &lt;div&gt; &lt;input class=\"input\" type=\"text\" id=\"task\" v-model.trim=\"todo\" placeholder=\"입력 후 엔터!\" v-on:keyup.enter=\"addTodo\"&gt; &lt;span class=\"addbutton\" v-on:click=\"addTodo\"&gt;추 가&lt;/span&gt; &lt;/div&gt; &lt;/template&gt;&lt;script type=\"text/javascript\"&gt; import eventBus from './EventBus.vue' // Import 이벤트 버스 export default &#123; name : 'input-todo', data : function() &#123; return &#123; todo : \"\" &#125; &#125;, methods : &#123; addTodo : function() &#123; eventBus.$emit('add-todo', this.todo); // 이벤트 발행 this.todo = \"\"; &#125; &#125; &#125;&lt;/script&gt; input을 통하여 자동으로 trim 된 값이(v-model.trim=”todo”) data로 전달됩니다. 엔터 또는 버튼을 누르면 addTodo가 실행되고, this.todo의 값을 포함한 ‘add-todo’ 이벤트를 등록합니다. 3.List.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;style&gt;...&lt;/style&gt;&lt;template&gt; &lt;ul id=\"todolist\"&gt; &lt;li v-for=\"(a, index) in todolist\" v-bind:class=\"checked(a.done)\" v-on:click=\"doneToggle(index)\"&gt; &lt;span&gt;&#123;&#123; a.todo &#125;&#125;&lt;/span&gt; &lt;span v-if=\"a.done\"&gt; (완료)&lt;/span&gt; &lt;span class=\"close\" v-on:click.stop=\"deleteTodo(index)\"&gt;&amp;#x00D7;&lt;/span&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/template&gt;&lt;script type=\"text/javascript\"&gt; import eventBus from './EventBus.vue' export default &#123; created : function() &#123; eventBus.$on('add-todo', this.addTodo); // 이벤트 구독 &#125;, data : function() &#123; return &#123; todolist : [ &#123; todo : \"영화보기\", done:false &#125;, &#123; todo : \"주말 산책\", done:true &#125;, &#123; todo : \"ES6 학습\", done:false &#125;, &#123; todo : \"잠실 야구장\", done:false &#125;, ] &#125; &#125;, methods : &#123; checked : function(done) &#123; if(done) return &#123; checked:true &#125;; else return &#123; checked:false &#125;; &#125;, addTodo : function(todo) &#123; if (todo !== \"\") &#123; this.todolist.push(&#123; todo : todo, done:false &#125;); &#125; &#125;, doneToggle : function(index) &#123; this.todolist[index].done = !this.todolist[index].done; &#125;, deleteTodo : function(index) &#123; this.todolist.splice(index,1); &#125; &#125; &#125;&lt;/script&gt; eventBus.$on을 통하여 ‘add-todo’ 이벤트를 받아 this.addTodo를 실행합니다. 전달된 todo값의 유무를 확인 후 true이면 todolist 배열에 넘어온 값을 추가 합니다. EventBus.$off()를 사용하면 이벤트를 제거할 수 있습니다. 4.TodoList.vue 123456789101112131415161718&lt;style&gt;...&lt;/style&gt;&lt;template&gt; &lt;div id=\"todolistapp\"&gt; &lt;div id=\"header\" class=\"header\"&gt; &lt;h2&gt;Todo List App&lt;/h2&gt; &lt;input-todo /&gt; &lt;/div&gt; &lt;list&gt;&lt;/list&gt; &lt;/div&gt; &lt;/template&gt;&lt;script type=\"text/javascript\"&gt; import InputTodo from './InputTodo.vue'; import List from './List.vue'; export default &#123; name : 'todo-list', components : &#123; InputTodo, List &#125; &#125;&lt;/script&gt; 스타일 적용 기존에는 스타일 태그를 이용한 전역 스타일을 적용하였습니다. 만약, 다른 컴포넌트에서도 동일한 CSS 클래스명을 사용한다면 충돌이 발생합니다. 특정 컴포넌트의 스타일을 지정하려면 범위CSS와 모듈CSS 두 가지 방법이 있습니다. 1.범위CSS 1234567src ㄴcomponents ㄴChild1.vue ㄴChild11.vue ㄴChild2.vue ㄴmain.jsindex.html Child1.vue, Child2.vue에는 모두 main 클래스의 스타일이 적용되어 있습니다. 이럴경우, 두 스타일이 충돌되면서 마지막에 선언된 스타일이 적용됩니다. 이때, 스타일 태그에 scoped를 추가하면 이를 해결할 수 있습니다. 범위 CSS를 적용하면 data-v-xxxxx 형태의 속성이 부여됩니다. 123&lt;style scoped&gt;.main&#123;border:1px solid #000;background-color:aqua&#125;&lt;/style&gt; 주의점 특성 선택자(attribute selector)를 사용하기 때문에 브라우저에서 스타일 적용 속도가 느립니다. 그렇기 대문에 속도가 빠른 ID, 클래스, 태그명 선택자로 요소를 선택해 스타일을 적용해야 합니다. 부모 컴포넌트에 적용된 범위CSS는 하위 컴포넌트에도 반영이 됩니다. 2.CSS모듈 CSS모듈은 CSS를 객체처럼 다루는 것을 의미합니다. 설정하는 방법은 간단합니다. 스타일 태그에 module을 추가하면 CSS 모듈 모드가 작동되면서 그 결과로 생성된 클래스 식별 객체는 $style이름으로 컴포넌트의 계산형 속성으로 추가됩니다. 이 스타일은 Vue 인스턴스 내에서 $style 이라는 계산형 속성을 통해서 이용할 수 있습니다. 123456&lt;button :class=\"$style.hand\"&gt; CSS Module을 적용한 버튼&lt;/button&gt;..&lt;style module&gt;.hand&#123;cursor:pointer;background-color:purple;color:yellow&#125;&lt;/style&gt; 적용해야 할 클래스가 여러개일 경우 배열 문법을 이용하며, 자바스크립트에서 접근이 가능합니다. 12345678&lt;div v-bind:class\"[$style.box, $style.border]\"&gt;Hello World&lt;/div&gt;..export default &#123; created() &#123; console.log(this.$style); &#125;&#125; 슬롯 기본사용법 슬롯을 이용해 부모 컴포넌트에서 자식 컴포넌트로 HTML 마크업을 전달 할 수 있습니다. 슬롯을 사용하기 위해서 자식 컴포넌트에서는 &#60;slot&#62;&#60;&#47;slot&#62; 태그를 작성하고 부모 컴포넌트에서는 콘텐츠 영역에서 자식 컴포넌트의 &#60;slot&#62;&#60;&#47;slot&#62; 영역에 나타낼 HTML 마크업을 작성하면 됩니다. 12345678// ChildComponent.vue&lt;template&gt; &lt;div&gt; &lt;p&gt;I'm the child component!&lt;/p&gt; &lt;!-- Content from the parent gets rendered here. --&gt; &lt;slot&gt;&lt;/slot&gt; &lt;/div&gt;&lt;/template&gt; 12345678910111213141516171819202122232425// ParentComponent.vue&lt;template&gt; &lt;div&gt; &lt;child-component&gt; &lt;p&gt;I'm injected content from the parent!&lt;/p&gt; &lt;p&gt;I can still bind to data in the parent's scope, like this! &#123;&#123;myVariable&#125;&#125;&lt;/p&gt; &lt;/child-component&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import ChildComponent from './ChildComponent.vue';export default &#123; components: &#123; ChildComponent &#125;, data() &#123; return &#123; myVariable: `I'm just a lonely old variable.` &#125; &#125;&#125;&lt;/script&gt; 자식 컴포넌트에 &#60;slot&#62;&#60;&#47;slot&#62;이 없을경우 부모로부터 전달되는 콘텐츠는 없어집니다. 반대로, 부모에서 어떠한 콘텐츠도 전달하지 않을경우, &#60;slot&#62;&#60;&#47;slot&#62;에 엘리먼트를 추가하면 기본적으로 랜더링 됩니다. 123&lt;slot&gt; &lt;p&gt;Hello from the child!&lt;/p&gt;&lt;/slot&gt; 명명된 슬롯 여러 개의 슬롯을 작성할 수 있습니다. 123456789101112131415161718// BurgerComponent.vue&lt;template&gt; &lt;div class=\"burger-component\"&gt; &lt;!-- Elements injected with the `slot=\"top-bun\"` attribute will end up in here. --&gt; &lt;slot name=\"top-bun\"&gt; &lt;/slot&gt; &lt;!-- A slot tag without a name is a catch-all, it will contain any content that doesn't have a `slot=\"\"` attribute. --&gt; &lt;slot&gt; &lt;/slot&gt; &lt;!-- Elements injected with the `slot=\"top-bun\"` attribute will end up in here. --&gt; &lt;slot name=\"bottom-bun\"&gt; &lt;/slot&gt; &lt;/div&gt;&lt;/template&gt; 1234567891011121314151617181920// SecretRecipeBurger.vue&lt;template&gt; &lt;!-- TOP SECRET, FOR EMPLOYEE EYES ONLY --&gt; &lt;burger-component&gt; &lt;burger-bun slot=\"top-bun\"&gt; &lt;sesame-seeds&gt;&lt;/sesame-seeds&gt; &lt;mayonaise&gt;&lt;/mayonaise&gt; &lt;/burger-bun&gt; &lt;burger-bun slot=\"bottom-bun\" :toasted=\"true\"&gt; &lt;secret-sauce&gt;&lt;/secret-sauce&gt; &lt;!-- I bought it from some hooded guy off the street. --&gt; &lt;/burger-bun&gt; &lt;!-- Everything else gets injected into the middle slot (as it's not named.) --&gt; &lt;pickles&gt;&lt;/pickles&gt; &lt;lettuce&gt;&lt;/lettuce&gt; &lt;bacon&gt;&lt;/bacon&gt; &lt;beef-patty&gt;&lt;/beef-patty&gt; &lt;cheese-slice&gt;&lt;/cheese-slice&gt; &lt;/burger-component&gt;&lt;/template&gt; 참고 https://hackernoon.com/observer-vs-pub-sub-pattern-50d3b27f838c https://github.com/vuejs/vue-loader/blob/master/docs/en/features/css-modules.md https://css-tricks.com/intro-to-vue-2-components-props-slots/ https://alligator.io/vuejs/component-slots/","categories":[],"tags":[]},{"title":"자바스크립트(JavaScript) this 바인딩 기본개념","slug":"js-this-bind","date":"2019-07-04T07:54:24.000Z","updated":"2019-07-04T08:04:48.754Z","comments":true,"path":"2019/07/04/js-this-bind/","link":"","permalink":"https://shlee1353.github.io/2019/07/04/js-this-bind/","excerpt":"","text":"자바스크립트에서 this 키워드는 좀 특별합니다. ES5에서는 bind 메소드를 사용해서 this 키워드를 설정 할 수 있으며, ES2015에서는 arrow functions 을 사용해서 고유의 this 키워드를바인딩 할 수 있습니다. (렉시컬 컨텍스트 안에 this를 유지) Global context함수 밖, 글로벌 실행 컨텍스트에서 this는 글로벌 객체를 가르킵니다(strict mode or not) 12345678console.log(this === window); // true a = 37;console.log(window.a); // 37 this.b = \"MDN\"; console.log(window.b) // \"MDN\" console.log(b) // \"MDN\" Function context함수 내부에서 this는 함수 호출에 따라 달라집니다. 일반모드에서 함수 내부의 this는 글로벌을 가르키지만, strict mode에서는 undefined이 출력됩니다. 1234567891011121314// non-strict modefunction f1() &#123; return this;&#125;// In a browser:f1() === window; // true // In Node:f1() === global; // true// strict modefunction f2() &#123; 'use strict'; // see strict mode return this;&#125;f2() === undefined; // true call, apply 메소드를 사용해서 this 값을 다른 컨텍스트로 전달 할 수 있습니다. 12345678var obj = &#123;a: 'Custom'&#125;;var a = 'Global';function whatsThis(arg) &#123; return this.a;&#125;whatsThis(); // 'Global'whatsThis.call(obj); // 'Custom'whatsThis.apply(obj); // 'Custom' call과 apply의 차이점은 두 번째 파라미터에 배열값을 전달 할 수 있는가 없는가 입니다. 첫 번째로 전달되는 this는 객체로, 숫자나 문자열이 전달 되어도 ToObject로 인해 객체로 변환됩니다. 123456function add(c, d) &#123; return this.a + this.b + c + d;&#125;var o = &#123;a: 1, b: 3&#125;;add.call(o, 5, 7); // 16add.apply(o, [10, 20]); // 34 f.bind(someObject)은 f와 같은 바디와 스코프를 가진 새로운 함수를 생성합니다. 하지만. this는 본래 함수에서 발생합니다. bind는 중복 설정되지 않고 한 번만 가능합니다. 123456789function f() &#123; return this.a;&#125;var g = f.bind(&#123;a: 'azerty'&#125;);console.log(g()); // azertyvar h = g.bind(&#123;a: 'yoo'&#125;); // bind only works once!console.log(h()); // azertyvar o = &#123;a: 37, f: f, g: g, h: h&#125;;console.log(o.f(), o.g(), o.h()); // 37, azerty, azerty arrow 함수에서 this 는 렉시컬 컨텍스트와 연결됩니다. 글로벌 코드에서는 글로벌 객체와 연결됩니다. obj.bar 의 익명함수1 안에 arrow 함수로 선언된 익명함수2의 this는 익명함수1의 this와 연결되어 있고, 이 this는 다시 obj 객체와 연결되어 있습니다. 123456789101112// 예시 1var globalObject = this;var foo = (() =&gt; this);console.log(foo() === globalObject); // true// 예시 2var obj = &#123;bar: function() &#123; var x = (() =&gt; this); return x; &#125;&#125;;var fn = obj.bar();console.log(fn() === obj); // true 함수가 객체의 메소드로 호출되면, 이것의 this는 메소드를 호출한 객체와 연결됩니다. o.f()가 호출되면, 함수 내부의 this는 o 객체가 된다. 1234567var o = &#123; prop: 37, f: function() &#123; return this.prop; &#125;&#125;;console.log(o.f()); // 37 프로토타입 체인에서도 this는 함수가 호출된 객체에 지정이 됩니다. 12345var o = &#123;f: function() &#123; return this.a + this.b; &#125;&#125;;var p = Object.create(o);p.a = 1;p.b = 4;console.log(p.f()); // 5 수정된 프로그램의 영향이 전체 소스에 퍼지지 않도록 getter, setter 사용합니다. 예를들어 123456//기존방법var o = &#123;&#125;;o.num = 10;// 개선방법var o = &#123;&#125;;Object.defineProperty(o, 'num', &#123;value:10&#125;); defineProperty 함수에서 가장 중요한 것은 세번째 옵션으로 들어가는 인자입니다. 12345678910111213141516value : 속성값writable : 속성값 변경 여부configurabl e: 속성의 옵션값 변경 여부enumerable : for in 반복만 사용 가능 여부get : value, writable 과 함꼐 사용 못함set : value, writable 과 함꼐 사용 못함var 원 = &#123;&#125;;원._반지름 = 0; // 겟터 셋터 대상 및 초기값 지정Object.defineProperty( 원, '반지름', &#123; get : function() &#123; return this._반지름; &#125;, set : function(값) &#123; this._반지름 = 값; &#125;&#125;);// 사용예 원.반지름 = 5;document.write('원.반지름 = ', 원.반지름); defineProperty없이 getter, setter 함수에 대해 알아보도록 하겠습니다. 아래처럼 person 객체에 get, set 함수를 정의해서 사용가능합니다. 123456789101112131415var person = &#123; firstName: 'Jimmy', lastName: 'Smith', get fullName() &#123; return this.firstName + ' ' + this.lastName; &#125;, set fullName (name) &#123; var words = name.toString().split(' '); this.firstName = words[0] || ''; this.lastName = words[1] || ''; &#125;&#125;person.fullName = 'Jack Franklin';console.log(person.firstName); // Jackconsole.log(person.lastName) // Franklin defineProperty에 의해 생성된 sum은 호출시 this가 o 객체를 향하고 있습니다. 1234567891011121314function sum() &#123; return this.a + this.b + this.c;&#125;var o = &#123; a: 1, b: 2, c: 3, get average() &#123; return (this.a + this.b + this.c) / 3; &#125;&#125;;Object.defineProperty(o, 'sum', &#123; get: sum, enumerable: true, configurable: true&#125;);console.log(o.average, o.sum); // 2, 6","categories":[],"tags":[]},{"title":"[앵귤러] 라이프사이클 이해하기","slug":"Angular-Lifecycle-Hooks","date":"2017-11-15T05:15:26.000Z","updated":"2017-12-20T05:19:49.000Z","comments":true,"path":"2017/11/15/Angular-Lifecycle-Hooks/","link":"","permalink":"https://shlee1353.github.io/2017/11/15/Angular-Lifecycle-Hooks/","excerpt":"","text":"생명주기(life cycle)컴포넌트와 지시자는 생명주기(life cycle) 를 가집니다. 생명주기란, 컴포넌트나 지시자가 생성되고 파괴될 때까지의 일련의 과정을 말합니다. 생명주기 안에서는 특정 시점에 훅 메서드(hook method)를 호출할 수 있습니다. 예를들어, 컴포넌트와 지시자가 초기화되면 ngOnInit() 훅 메서드가 호출됩니다. 만약 이 시점에 실행할 내용이 있다면 컴포넌트 클래스 내에서 ngOnInit() 훅 메서드를 선언하면 됩니다.123export class MyComponent &#123; ngOnInit() &#123; ... &#125;&#125; 생명주기 시퀀스훅 메서드는 호출될 때 일정한 순서로 호출됩니다. 이처럼 일정한 순서로 호출되는 과정을 생명주기 시퀀스(lifecycle sequence) 라고 합니다. 아래와 같은 순서로 이루어집니다. 생명주기 시퀀스는 초기화 시점, 상태 체크 시점, 이벤트 시점으로 다시 나뉩니다. ngOnChanges ngOnInit ngDoCheck ngAfterContentInit ngAfterContentChecked ngAfterViewInit ngAfterViewChecked ngOnDestroy 초기화 ngOnInit() : 컴포넌트나 지시자가 생성될 때 호출되는 메서드. 생명주기의 초기화 시점입니다. ngAfterContentInit() : 외부 콘텐츠가 컴포넌트 뷰로 들어갔을 때 호출 ngAfterViewInit() : 컴포넌트 뷰와 자식 뷰가 초기화되고 나서 호출 상태체크 ngDoCheck() 메서드가 호출되고 나서 ngAfterViewChecked() 가 호출되기까지 콘텐츠와 뷰에 대한 상태 점검이 진행되는 때를 말합니다. 콘텐츠 : 컴포넌트가 선언될 때 내부 엘리먼트에 선언한 엘리먼트의 속성값을 말합니다. 123&lt;parent [prop]=\"..\"&gt; &lt;child name=\"\"&gt;&lt;/child&gt; // 콘텐츠&lt;/parent&gt; Content projection(transclusion) : 컴포넌트 외부에서 HTML을 가져와 컴포넌트 내부에 원하는 위치에 추가함. Content projection을 의도하지 않았다면 콘텐츠를 컴포넌트 사이에 절대 넣지 마세요. 12345678910// AfterContentParentComponent`&lt;after-content&gt; &lt;my-child&gt;&lt;/my-child&gt; &lt;/after-content&gt;`// AfterContentComponenttemplate: ` &lt;div&gt;-- projected content begins --&lt;/div&gt; &lt;ng-content&gt;&lt;/ng-content&gt; &lt;div&gt;-- projected content ends --&lt;/div&gt;` 뷰 : 컴포넌트 내부 탬플릿에 선언한 지시자의 상태 123456@Component(&#123; selector: 'parent', template:` &lt;my-click id=\"1\" *ngIf=\"status\"&gt;&lt;/my-click&gt; // 지시자 &lt;my-click id=\"2\" *ngIf=\"status\"&gt;&lt;/my-click&gt;`&#125;) 이벤트 시점 컴포넌트가 초기화될 때는 ngOnInit() 메서드가 먼저 호출되지만 컴포넌트나 지시자에서 속성 바인딩에 의한 이벤트가 발생하면 ngOnChanges() 가 호출되고 나서 ngOnInit() 이 호출됩니다. ngOnChanges() 메서드는 현재 상태값(currentValue)과 이전 상태값(previousValue)을 확인할 수 있는 SimpleChanges 객체를 받습니다. 12345// SimpleChanges 사용법import &#123;Component, OnChanges, SimpleChanges &#125; from '@angular/core';ngOnChanges(changes: SimpleChanges) &#123; changes.prop&#125; ngOnDestroy()는 컴포넌트나 지시자를 제거할 때 실행됩니다. 컴포넌트 생명주기12345cmp-lifecycle ㄴ child-cmp.component.ts ㄴ cmp-lifecycle.component.ts ㄴ my-cmp.component.ts ㄴ window.directive.ts 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879// child-cmp.component.tsimport &#123; Component, Input, ContentChild, ViewChild, OnChanges, DoCheck, OnInit, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy &#125; from '@angular/core';import &#123; MyCmp &#125; from './my-cmp.component';import &#123; Window &#125; from './window.directive';@Component(&#123; selector: 'child-cmp', template: `&lt;input type=\"text\" [(ngModel)]=\"message\" placeholder=\"바인딩 있음\"&gt; &lt;input type=\"text\" placeholder=\"바인딩 없음\"&gt; // window 지시자는 ngif 상태에 따라 상태값을 결정 &lt;window id=\"1\" *ngIf=\"shouldShow\"&gt;&lt;/window&gt; &lt;window id=\"2\" *ngIf=\"!shouldShow\"&gt;&lt;/window&gt; &lt;button (click)=\"toggle()\"&gt;View 상태변경&lt;/button&gt;`&#125;)// implements 키워드를 이용해 컴포넌트 클래스에 훅을 구현export class ChildCmp implements OnChanges, DoCheck, OnInit, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy &#123; message: string = \"\"; oldMessage: string = \"\"; constructor() &#123; console.log(\"\\n1-컴포넌트 : constructor()\"); &#125; @Input() set prop(name: string) &#123; console.log(\"@Input prop() 세터 메서드 호출\"); &#125; ngOnChanges() &#123; console.log(\"2--컴포넌트 : ngOnChanges()\"); &#125; ngOnInit() &#123; console.log(\"3---컴포넌트 : ngOnInit()\"); &#125; ngDoCheck() &#123; console.log(\"4----컴포넌트 : ngDoCheck()\"); if (this.message != this.oldMessage) &#123; console.log(\"4----컴포넌트 : ngDoCheck()에서 변화감지\"); this.oldMessage = this.message; &#125; &#125; // @ContentChild 장식자를 이용해 child-cmp의 자식 엘리먼트인 my-cmp 컴포넌트에 선언된 속성값을 받음 @ContentChild(MyCmp) myCmp: MyCmp; oldMyCmpId: any; ngAfterContentInit() &#123; console.log(\"5-----컴포넌트 : ngAfterContentInit()\"); this.oldMyCmpId = this.myCmp.value; &#125; ngAfterContentChecked() &#123; console.log(\"6------컴포넌트 : ngAfterContentChecked()\"); if (this.oldMyCmpId != this.myCmp.value) &#123; console.log(\"6------컴포넌트 : ngAfterContentChecked()에서 변화감지\"); this.oldMyCmpId = this.myCmp.value; &#125; &#125; shouldShow = true; toggle() &#123; this.shouldShow = !this.shouldShow; &#125; // Query for a VIEW child of type `Window` @ViewChild(Window) window; oldWindowId: any; ngAfterViewInit() &#123; // viewChild is set after the view has been initialized console.log(\"7-------컴포넌트 : ngAfterViewInit()\"); this.oldWindowId = this.window.id; &#125; ngAfterViewChecked() &#123; // viewChild is updated after the view has been checked console.log(\"8--------컴포넌트 : ngAfterViewChecked()\"); if (this.oldWindowId != this.window.id) &#123; console.log(\"8--------컴포넌트 : ngAfterViewChecked()에서 변화감지\"); this.oldWindowId = this.window.id; &#125; &#125; ngOnDestroy() &#123; console.log(\"9---------컴포넌트 : ngOnDestroy()\"); &#125;&#125; 12345678910// my-cmp.component.tsimport &#123; Component, Input &#125; from '@angular/core';@Component(&#123; selector: 'my-cmp', template: ``&#125;)export class MyCmp &#123; @Input() value: string;&#125; 1234567891011121314151617181920// cmp-lifecycle.component.ts// cmp-lifecycle은 my-cmp 컴포넌트를 콘텐츠로 가진다import &#123; Component &#125; from '@angular/core';@Component(&#123; selector: 'cmp-lifecycle', template: ` &lt;button (click)=\"toggle()\"&gt;Content 상태변경&lt;/button&gt; &lt;button (click)=\"isShow=!isShow\"&gt;&#123;&#123;isShow==false?'컴포넌트 추가':'컴포넌트 삭제'&#125;&#125;&lt;/button&gt; &lt;br&gt; &lt;child-cmp *ngIf=\"isShow\" [prop]=\"shouldShow\"&gt; &lt;my-cmp value=\"&#123;&#123;shouldShow&#125;&#125;\"&gt;&lt;/my-cmp&gt; &lt;/child-cmp&gt;`&#125;)export class CmpLifecycleComponent &#123; isShow: boolean = false; shouldShow = true; toggle() &#123; this.shouldShow = !this.shouldShow; &#125;&#125; 콘텐츠 훅 vs. 뷰 훅콘텐츠 훅과 뷰 훅은 매우 유사하지만 분명한 차이점이 있습니다. AfterContent 훅은 ContentChildren 을 고려합니다 (컴포넌트 안으로 투영된 자식 컴포넌트) AfterView 훅은 ViewChildren 을 고려합니다 (자식 컴포넌트로 컴포넌트 템플릿 안에 엘리먼트 태그로 존재함) 컴포넌트 생명주기 (콘텐츠 훅) 초기값을 확인해보면 shouldShow = true, isShow = false 입니다. Content 상태변경 클릭시, shouldShow = true, false 전환되지만, 외부 뷰의 표시를 결정하지 않기 때문에 훅 메서드를 호출하지 않습니다. 컴포넌트 추가 를 클릭하면, isShow가 true값으로 변하면서 child-cmp가 화면에 그려지기 때문에 초기 출력 로그를 확인할 수 있습니다. 컴포넌트 시퀀스 생명주기가 나타나고 (1)-(8), child-cmp 컴포넌트 내부에 ngModel 바인딩이 일어나 (4)-(8) 훅에 대한 로그 결과 출력. (4)~(8) 로그가 출력된 이유는 child-cmp 컴포넌트 내부에 ngModel 바인딩이 일어났기 때문입니다. 현재까지의 상태값을 확인해보면, shouldShow = true, isShow = true, this.oldMyCmpId = true, this.myCmp.value = true 입니다. 이제 다시 Content 상태변경 을 클릭하면 아래와같은 출력 로그를 확인할 수 있습니다. 123456@Input prop() 세터 메서드 호출2--컴포넌트 : ngOnChanges()4----컴포넌트 : ngDoCheck()6------컴포넌트 : ngAfterContentChecked()6------컴포넌트 : ngAfterContentChecked()에서 변화감지8--------컴포넌트 : ngAfterViewChecked() Content 상태변경 을 클릭할 때 shouldShow 값이 바뀌면서 속성바인딩 [prop]=”shouldShow” 의 상태가 변경되면서 이를 @Input() set prop(name: string) {…} 에서 받은 뒤 ngOnChanges() 호출 child-cmp 엘리먼트의 [prop] 상태가 변경되었기 때문에 상태점검을 히기위해 ngDoCheck() 호출 my-cmp 엘리먼트의 속성값이 바뀐걸 확인하기 위해, 이전값과 새로운값을 비교한뒤 “ngAfterContentChecked()에서 감지변화” 호출. 이때 my-cmp의 속성값은 @ContentChild(MyCmp) myCmp: MyCmp; 로 받아옵니다. 컴포넌트 생명주기 (뷰 훅) [(ngModel)]=”message”로 바인딩 되어있는 input에 텍스트를 추가하면 this.oldMessage, this.message 를 비교하여 “ngDoCheck()에서 변화감지” 를 출력 바인딩이없는 input에 입력시 아무런 호출도 일어나지 않습니다. View 상태변경 클릭시 this.shouldShow 상태값 변경되면서 @ViewChild 장식자를 통해 window 지시자에서 가져오는 id값이 달라집니다. 이전 값과 현재 값이 달라져서 “ngAfterViewChecked()에서 변화감지” 호출 컴포넌트 삭제 클릭시 ngOnDestroy() 메서드가 호출됩니다. 지시자 생명주기앞서 살펴본 컴포넌트의 생명주기와 크게 다르지 않습니다.12345678910111213141516171819202122232425import &#123; Directive, Input &#125; from '@angular/core';@Directive(&#123; selector: '[my-click]', host: &#123; '(click)': 'onClick()' &#125;&#125;)export class MyClickDirective&#123; _prop: string = ''; @Input() set prop(name: string) &#123; this._prop = name || ''; console.log(\"@Input prop() 세터 메서드 호출\"); &#125; onClick() &#123; console.log(\"지시자 : onClick() 메서드 호출\"); &#125; constructor() &#123; console.log(\"1-지시자 : constructor()\"); &#125; ngOnChanges() &#123; console.log(\"2--지시자 : ngOnChanges()\"); &#125; ngOnInit() &#123; console.log(\"3---지시자 : ngOnInit()\"); &#125; ngDoCheck() &#123; console.log(\"4----지시자 : ngDoCheck()\"); &#125; ngAfterContentInit() &#123; console.log(\"5-----지시자 : ngAfterContentInit()\"); &#125; ngAfterContentChecked() &#123; console.log(\"6------지시자 : ngAfterContentChecked()\"); &#125; ngAfterViewInit() &#123; console.log(\"7-------지시자 : ngAfterViewInit()\"); &#125; ngAfterViewChecked() &#123; console.log(\"8--------지시자 : ngAfterViewChecked()\"); &#125; ngOnDestroy() &#123; console.log(\"9---------지시자 : ngOnDestroy()\"); &#125;&#125; 지시자 추가 를 클릭하면 my-click 지시자가 호출됩니다. prop 속성 바인딩을 통해 자신의 상태를 변경하기 때문에 세터 메서드와 ngOnChanges() 훅이 호출되었습니다. 지시자 내부에서 컴포넌트 전용 훅이 호출되지만, 지시자 생명주기로는 사용하지 않습니다. 아래 4가지 공통 훅을 사용합니다. 1234ngOnChanges(...)ngOnInit(...)ngDoCheck(...)ngOnDestroy(...) 상태변경 을 클릭하면 my-click 지시자의 prop 속성값이 변하면서 지시자 내부에서는 상태변경과 검사를 위한 훅 메서드가 호출됩니다. my-click 지시자 를 클릭하면 onClick() 메서드가 호출 되면서 상태 점검 ngDoCheck() 이 뒤이어 호출됩니다. Angular vs. React Angular React constructor constructor() ngOnChanges componentWillMount() ngOnInut render() ngDoCheck componentDidMount() ngAfterContentInit componentWillReceiveProps() ngAfterContentChecked shouldComponentUpdate() ngAfterViewInit componentWillUpdate() ngAfterViewChecked render() ngOnDestory componentDidUpdate() componentWillUnmount()","categories":[],"tags":[]}]}