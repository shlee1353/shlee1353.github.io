{"meta":{"title":"Ryan Lee","subtitle":null,"description":null,"author":"Ryan Lee","url":"https://shlee1353.github.io"},"pages":[],"posts":[{"title":"[자바스크립트] 기본 가이드 (JavaScript Guide)","slug":"JS-Basic-Guide","date":"2017-12-05T09:38:45.000Z","updated":"2017-12-05T09:39:53.000Z","comments":true,"path":"2017/12/05/JS-Basic-Guide/","link":"","permalink":"https://shlee1353.github.io/2017/12/05/JS-Basic-Guide/","excerpt":"","text":"Data structures and typesData types Boolean null undefined Number String Symbol Object Object를 제외하고 나머지 6개의 데이터 타입은 원시형(primitives) 으로 객체와 메소드가 없으며 immutable 속성을 가지고 있습니다. undefined은 변수가 정의되어 있지만 아무 값도 할당 받지 않은 상태이며, null은 null값을 할당받은 것을 말합니다. 또 다른 차이점은 null은 객체타입, undefined은 undefined이 출력됩니다. Primitive wrapper objects원시타입형에서 properties에 값을 할당은 안되지만, 오류는 아닙니다. 이는 null과 undefined를 제외한, 나머지 원시값은 그 값들을 감싸는 primitive wrapper objects 때문입니다. 객체의 원시값을 가져올때는 valueOf() 사용가능합니다.123456789101112131415161718var fred = \"Fred Flintstone\";fred.favoriteFood = \"Brontosaurus Steak\";// Outputs: undefinedconsole.log(fred.favoriteFood);// 문자열 표현let str1 = new String('str1')let str2 = 'str2'typeof str1 // 'object'typeof str2 // 'string'str1 instanceof String // truestr2 instanceof String // falsestr1 instanceof Object // truestr2 instanceof Object // false NaN1234567891011121314typeof NaN === 'number' // true NaN === NaN // false NaN !== NaN // true isNaN(NaN) // true isNaN(0) // false isNaN('oops') // true isNaN('0') // false // 숫자 구별방법function isNumber(value) &#123; return typeof value === 'number' &amp;&amp; isFinite(value);&#125; LiteralsArray, Boolean, Floating-point, Integers, Object, RegExp, String Array literals123456var coffees = ['French Roast', 'Colombian', 'Kona'];var cats = [];cats[30] = ['Dusty'];console.log(cats.length); // 31console.log(cats['length']); // 31 배열의 length를 이용하여 값을 제거할 수 있습니다.1234var cats = ['Dusty', 'Misty', 'Twiggy'];console.log(cats.length); // 3cats.length = 2;console.log(cats); for 문과 forEach()를 사용해서 배열을 순환할 수 있습니다.1234567var colors = ['red', 'green', 'blue'];for (var i = 0; i &lt; colors.length; i++) &#123; console.log(colors[i]);&#125;var colors = ['red', 'green', 'blue'];colors.forEach(color =&gt; console.log(color)); Array methods1concat()-new, join(), push(), pop(), shift(), unshift(), slice()-new, splice(), sort(), indexOf(), lastIndexOf(), forEach(), map()-new, filter()-new, every()-true/false, some()-true/false, reduce(), reduceRight() 배열은 정규표현식과 match의 결과값이기도 합니다.1RegExp.exec(), String.match(), and String.split(). 유사배열 객체 (array-like objects)document.querySelectorAll(), document.getElementsByTagName()의 리턴값인 NodeList 또는 arguments는 배열처럼 생겼지만 모든 메소드를 사용할 수는 없습니다. 예를들어, arguments 객체는 length 속성을 제공하지만 forEach()를 사용할 수 없습니다. NodeList는 live collection 또는 static collection 입니다.1234getElementsByClassName() : HTMLCollection &amp; livegetElementsByTagName() : HTMLCollection &amp; livegetElementsByName() : NodeList &amp; livequerySelectorAll() : NodeList &amp; not live Iteratorsiterable 프로토콜은 반복문을 가능케합니다. String, Array, TypedArray, Map, Set은 iterable이 내재되어 있습니다. @@iterator 메소드가 반드시 필요합니다. 객체에 iterator을 주입시키는 방법은 아래와 같습니다.1234567var myIterable = &#123;&#125;;myIterable[Symbol.iterator] = function* () &#123; yield 1; yield 2; yield 3;&#125;;[...myIterable]; // [1, 2, 3] for…of / for…infor…in 은 객체의 enumerable 속성을 반복하며, for…of는 iterable 객체를 반복합니다.12345678910111213141516171819Object.prototype.objCustom = function() &#123;&#125;; Array.prototype.arrCustom = function() &#123;&#125;;let iterable = [3, 5, 7];iterable.foo = 'hello';for (let i in iterable) &#123; console.log(i); // logs 0, 1, 2, \"foo\", \"arrCustom\", \"objCustom\"&#125;for (let i in iterable) &#123; if (iterable.hasOwnProperty(i)) &#123; console.log(i); // logs 0, 1, 2, \"foo\" &#125;&#125;for (let i of iterable) &#123; console.log(i); // logs 3, 5, 7&#125; enumerable은 간단히 말해 for…in 또는 Object.keys로 접근시 노출되는 것을 의미합니다. 아래 코드 실행시 enumerable의 값이 true로 나와 있습니다. 새로운 프로퍼티 생성시 이 값은 기본적으로 true로 설정되어 있기 때문입니다.12345678910111213const obj = &#123; purposeOfLife: 42,&#125;Object.getOwnPropertyDescriptor(obj, 'purposeOfLife')// result&#123; value: 42, writable: true, enumerable: true, configurable: true&#125; defineProperty를 사용할 때 주의 할점은 기본값이 false입니다. non-enumerable properties를 생성하려면 Object.definedProperty()를 사용하시면 됩니다.12345var person = &#123; age: 18 &#125;;Object.defineProperty(person, 'name', &#123; value: 'Joshua', enumerable: false &#125;);person.name; // 'Joshua'Object.keys(person); // ['age']","categories":[],"tags":[]},{"title":"[자바스크립트] 실무 디자인 패턴 익히기","slug":"JS-Practical-Design-Patterns","date":"2017-11-27T08:22:29.000Z","updated":"2017-11-29T06:57:45.000Z","comments":true,"path":"2017/11/27/JS-Practical-Design-Patterns/","link":"","permalink":"https://shlee1353.github.io/2017/11/27/JS-Practical-Design-Patterns/","excerpt":"","text":"자바스크립트 모듈 작성시 코드 순서 변수선언 유틸리티 메소드 작성 DOM조작 메소드 작성 이벤트 핸들러 작성 Public 메소드 작성 12345678910111213141516171819202122232425262728293031323334// SPA 모듈 작성 순서 예시var app = (function() &#123; // 1. 모듈 스코프 내에서 사용할 변수 작성 var scopeVar = &#123;&#125;; var utilMethod; var manipulateDom; var eventHandle; var initModule; // 2. 유틸리티 메소드 작성 utilMethod = function() &#123; // 실행코드 &#125;; // 3. DOM 조작 메소드 작성 manipulateDom = function() &#123; // 실행코드 &#125;; // 4. 이벤트 핸들러 작성 eventHandle = function() &#123; // 실행코드 &#125;; // Public 메소드 작성 initModule = function() &#123; // 실행코드 &#125;; return &#123; init : initModule &#125;;&#125;()); MVC 패턴 1234567891011var todoModel = (function($)&#123;&#125;)(jQuery);var todoView = (function($)&#123;&#125;)(jQuery);var todoController = (function($, model, view)&#123;&#125;)(jQuery, todoModel, todoView).init();","categories":[],"tags":[]},{"title":"[몽고DB] 간략 사용 설명서","slug":"MongoDB-Quick-Guide","date":"2017-11-21T05:35:17.000Z","updated":"2017-11-29T07:06:41.000Z","comments":true,"path":"2017/11/21/MongoDB-Quick-Guide/","link":"","permalink":"https://shlee1353.github.io/2017/11/21/MongoDB-Quick-Guide/","excerpt":"","text":"소개 MongoDB는 관계형 DB가 아니므로, RDMS(관계형 데이터베이스 관리 시스템)처럼 고정된 스키마 및 JOIN이 존재하지 않습니다. JOIN이란 둘 이상의 테이블을 연결하여 데이터를 검색하는 방법입니다. 보통 공통된 값 primary Key 및 Foreign Key 값을 사용합니다. Document Oriented 데이터베이스 이기 때문에 key-value pair로 이루어져 있습니다. Collection은 RDMS의 table과 비슷한 개념으로 document들을 포함하고 있습니다. 설치 HomeBrew를 이용해서 설치하도록 하겠습니다. 12345678brew updatebrew install mongodbmkdir -p /data/dbsudo chmod 777 /data/dbmongod// 다른 터미널 커맨드mongo 데이터 모델링1234567891011121314151617181920&#123; _id: POST_ID, title: POST_TITLE, content: POST_CONTENT, username: POST_WRITER, tags: [ TAG1, TAG2, TAG3 ], time: POST_TIME comments: [ &#123; username: COMMENT_WRITER, mesage: COMMENT_MESSAGE, time: COMMENT_TIME &#125;, &#123; username: COMMENT_WRITER, mesage: COMMENT_MESSAGE, time: COMMENT_TIME &#125; ]&#125; 몽고DB구조: SERVER &gt; DATABASE &gt; COLLECTION &gt; DOCUMENT 1234567use mongodb_tutorial // 데이터베이스 생성db // 현재 사용중인 데이터베이스 확인show dbs // 생성된 데이터베이스 리스트들 확인. 최소 한개의 document 필요db.dropDatabase(); // 데이터베이스 제거db.monster.insert(&#123;&quot;animal&quot;: &quot;lion&quot;&#125;) // documnet를 추가하면 컬렉션 자동 생성show collections // 리스트 확인db.monster.drop(); // 컬렉션 제거 참고 https://velopert.com","categories":[],"tags":[]},{"title":"[자바스크립트] 'this' 키워드 이해하기","slug":"JS-Understanding-the-this-Keyword","date":"2017-11-15T10:21:29.000Z","updated":"2017-11-29T02:47:58.000Z","comments":true,"path":"2017/11/15/JS-Understanding-the-this-Keyword/","link":"","permalink":"https://shlee1353.github.io/2017/11/15/JS-Understanding-the-this-Keyword/","excerpt":"","text":"this 자바스크립트에서 this 키워드는 좀 특별합니다. 이것은 어떻게 함수가 호출되는 가에 따라 달라집니다. ES5에서는 bind 메소드를 사용해서 this 키워드를 설정 할 수 있습니다. ES2015에서는 arrow functions 을 사용해서 고유의 this 를 바인딩 할 수 있습니다. (렉시컬 컨텍스트 안에 this를 유지) Global context 함수 밖, 글로벌 실행 컨텍스트에서 this는 글로벌 객체를 가르킵니다(strict mode or not)123456789// In web browsers, the window object is also the global object:console.log(this === window); // truea = 37;console.log(window.a); // 37this.b = &quot;MDN&quot;;console.log(window.b) // &quot;MDN&quot;console.log(b) // &quot;MDN&quot; Function context 함수 내부에서 this는 함수 호출에 따라 달라집니다. -Simple call 일반모드에서 함수 내부의 this는 글로벌을 가르키지만, strict mode에서는 undefined이 출력됩니다. 12345678910111213141516// non-strict modefunction f1() &#123; return this;&#125;// In a browser:f1() === window; // true // In Node:f1() === global; // true// strict modefunction f2() &#123; &apos;use strict&apos;; // see strict mode return this;&#125;f2() === undefined; // true call, apply 메소드를 사용해서 this 값을 다른 컨텍스트로 전달 할 수 있습니다. 12345678910111213// An object can be passed as the first argument to call or apply and this will be bound to it.var obj = &#123;a: &apos;Custom&apos;&#125;;// This property is set on the global objectvar a = &apos;Global&apos;;function whatsThis(arg) &#123; return this.a; // The value of this is dependent on how the function is called&#125;whatsThis(); // &apos;Global&apos;whatsThis.call(obj); // &apos;Custom&apos;whatsThis.apply(obj); // &apos;Custom&apos; call과 apply의 차이점은 두 번째 파라미터에 배열값을 전달 할 수 있는가 없는가 입니다. 첫 번째로 전달되는 this는 객체로, 숫자나 문자열이 전달 되어도 ToObject로 인해 객체로 변환됩니다. 123456789101112131415function add(c, d) &#123; return this.a + this.b + c + d;&#125;var o = &#123;a: 1, b: 3&#125;;// The first parameter is the object to use as// &apos;this&apos;, subsequent parameters are passed as // arguments in the function calladd.call(o, 5, 7); // 16// The first parameter is the object to use as// &apos;this&apos;, the second is an array whose// members are used as the arguments in the function calladd.apply(o, [10, 20]); // 34 -The bind method f.bind(someObject)은 f와 같은 바디와 스코프를 가진 새로운 함수를 생성합니다. 하지만. this는 본래 함수에서 발생합니다. bind는 중복 설정되지 않고 한 번만 가능합니다.123456789101112function f() &#123; return this.a;&#125;var g = f.bind(&#123;a: &apos;azerty&apos;&#125;);console.log(g()); // azertyvar h = g.bind(&#123;a: &apos;yoo&apos;&#125;); // bind only works once!console.log(h()); // azertyvar o = &#123;a: 37, f: f, g: g, h: h&#125;;console.log(o.f(), o.g(), o.h()); // 37, azerty, azerty -Arrow functions arrow 함수에서 this 는 렉시컬 컨텍스트와 연결됩니다. 글로벌 코드에서는 글로벌 객체와 연결됩니다. obj.bar 의 익명함수1 안에 arrow 함수로 선언된 익명함수2의 this는 익명함수1의 this와 연결되어 있고, 이 this는 다시 obj 객체와 연결되어 있습니다.12345678910111213// 첫 번째 예시var globalObject = this;var foo = (() =&gt; this);console.log(foo() === globalObject); // true// 두 번째 예시var obj = &#123;bar: function() &#123; var x = (() =&gt; this); return x; &#125;&#125;;var fn = obj.bar();console.log(fn() === obj); // true -As an object method 함수가 객체의 메소드로 호출되면, 이것의 this는 메소드를 호출한 객체와 연결됩니다. o.f()가 호출되면, 함수 내부의 this는 o 객체가 된다.12345678var o = &#123; prop: 37, f: function() &#123; return this.prop; &#125;&#125;;console.log(o.f()); // 37 -this on the object’s prototype chain 프로토타입 체인에서도 this는 함수가 호출된 객체에 지정이 됩니다.123456var o = &#123;f: function() &#123; return this.a + this.b; &#125;&#125;;var p = Object.create(o);p.a = 1;p.b = 4;console.log(p.f()); // 5 -this with a getter or setter 수정된 프로그램의 영향이 전체 소스에 퍼지지 않도록 getter, setter 사용합니다. 예를들어 1234567//기존방법var o = &#123;&#125;;o.num = 10;// 개선방법var o = &#123;&#125;;Object.defineProperty(o, &apos;num&apos;, &#123;value:10&#125;); defineProperty 함수에서 가장 중요한 것은 세번째 옵션으로 들어가는 인자입니다. 123456value : 속성값writable : 속성값 변경 여부configurabl e: 속성의 옵션값 변경 여부enumerable : for in 반복만 사용 가능 여부get : value, writable 과 함꼐 사용 못함set : value, writable 과 함꼐 사용 못함 소스출처123456789101112var 원 = &#123;&#125;;원._반지름 = 0; // 겟터 셋터 대상 및 초기값 지정Object.defineProperty( 원, &apos;반지름&apos;, &#123; get : function() &#123; return this._반지름; &#125;, set : function(값) &#123; this._반지름 = 값; &#125;&#125;);// 사용예 원.반지름 = 5;document.write(&apos;원.반지름 = &apos;, 원.반지름); defineProperty없이 getter, setter 함수에 대해 알아보도록 하겠습니다. 아래처럼 person 객체에 get, set 함수를 정의해서 사용가능합니다. 12345678910111213141516var person = &#123; firstName: &apos;Jimmy&apos;, lastName: &apos;Smith&apos;, get fullName() &#123; return this.firstName + &apos; &apos; + this.lastName; &#125;, set fullName (name) &#123; var words = name.toString().split(&apos; &apos;); this.firstName = words[0] || &apos;&apos;; this.lastName = words[1] || &apos;&apos;; &#125;&#125;person.fullName = &apos;Jack Franklin&apos;;console.log(person.firstName); // Jackconsole.log(person.lastName) // Franklin defineProperty에 의해 생성된 sum은 호출시 this가 o 객체를 향하고 있습니다.1234567891011121314151617function sum() &#123; return this.a + this.b + this.c;&#125;var o = &#123; a: 1, b: 2, c: 3, get average() &#123; return (this.a + this.b + this.c) / 3; &#125;&#125;;Object.defineProperty(o, &apos;sum&apos;, &#123; get: sum, enumerable: true, configurable: true&#125;);console.log(o.average, o.sum); // 2, 6 참조 https://stackoverflow.com/questions/20279484/how-to-access-the-correct-this-inside-a-callback https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode","categories":[],"tags":[]},{"title":"[Vue] 빠르게 훑어보기","slug":"Vue-Quick-Start","date":"2017-11-15T07:46:59.000Z","updated":"2018-01-02T02:11:08.000Z","comments":true,"path":"2017/11/15/Vue-Quick-Start/","link":"","permalink":"https://shlee1353.github.io/2017/11/15/Vue-Quick-Start/","excerpt":"","text":"설치12sudo npm install -g vue-clivue init simple hellovuejs // 애플리케이션 생성 애플리케이션을 생성하고 index.html 파일을 아래처럼 수정하도록 하겠습니다. 리액트나 앵귤러와 달리 초기 환경설정이 매우 간편하다는 장점이 있습니다. 1234567891011121314151617181920212223&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;02-01&lt;/title&gt; &lt;script src=\"https://unpkg.com/vue/dist/vue.min.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"simple\"&gt; &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt; &lt;/div&gt; &lt;script type=\"text/javascript\"&gt; var model = &#123; message : \"첫 번째 Vue.js 앱 입니다!\" &#125;; var simple = new Vue(&#123; el : '#simple', data : model &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; Vue.js 는 기본적으로 MVVM 디자인 패턴을 사용하고 있습니다. 1234// View&lt;div id=\"simple\"&gt; &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;&lt;/div&gt; View는 화면상에 보여지는 영역이며 중괄호 두개를 사용하여 데이터 값과 연동됩니다. 12345678910// View Modelvar simple = new Vue(&#123; el : '#simple', data : model&#125;)// Modelvar model = &#123; message : \"첫 번째 Vue.js 앱 입니다!\"&#125;; 모델(Model)을 변경하면 뷰모델(ViewModel) 객체를 통해 HTML DOM이 즉시 변경됩니다. index.html 파일을 실행 한 뒤 콘솔 창을 띄웁니다. 그 다음 아래 코드를 넣어주시면, 화면상에서 바로 값이 반영되는 것을 확인 할 수 있습니다. 1model.message = \"hello Vue.js\"; 기본 디렉티브 미리 선언해 놓은 디렉티브를 사용하면 좀 더 효율적으로 Vue.js를 사용하실 수 있습니다. v-text v-text는 이전에 사용한 중괄호 두개와 같은 기능을 하며 자바스크립트의 innerText 속성과 연결됩니다. (사용권장) 123&lt;div id=\"simple\"&gt; &lt;h2 v-text=\"message\"&gt;&lt;/h2&gt;&lt;/div&gt; v-html 예시 v-html은 innerHTML 속성과 연결되며 태그 문자열을 파싱하여 화면에 나타냅니다. 123&lt;div id=\"simple\"&gt; &lt;h2 v-html=\"message\"&gt;&lt;/h2&gt;&lt;/div&gt; v-bind 예시 v-bind는 요소 객체의 속성들을 단방향 바인딩 하기위해 사용합니다. 1234567&lt;input id=\"a\" type=\"text\" v-bind:value=\"message\"&gt;&lt;img v-bind:src=\"imagePath\" /&gt;var model = &#123; message : 'v-bind 디렉티브', imagePath : 'http://sample.bmaster.kro.kr/photos/61.jpg'&#125;; v-model 예시, 예시 앞에서 살펴본 단방향 바인딩은 HTML 요소에서 값을 변경하더라도 모델 객체의 값이 바뀌지 않습니다. v-model은 요소에서 변경한 값이 모델 객체에 반영되는 양방향 바인딩을 제공합니다. 12345678&lt;input type=\"text\" v-model=\"name\" placeholder=\"이름을 입력하세요\" /&gt;입력된 이름 : &lt;h2 v-html=\"name\"&gt;&lt;/h2&gt;var twoway = new Vue(&#123; el : '#simple', data : &#123; name : ''&#125; v-model 디렉티브는 텍스트 박스뿐만 아니라 다양한 입력 폼 필드에서도 사용 가능합니다. 링크 되어 있는 예시코드를 살펴보면 배열 fruits을 가지고 있는 model을 두 개의 Vue 객체(#simple1, #simple2)에서 참조합니다. 1234567891011&lt;input type=\"checkbox\" value=\"1\" v-model=\"fruits\"&gt;사과, &lt;input type=\"checkbox\" value=\"2\" v-model=\"fruits\"&gt;키위, &lt;input type=\"checkbox\" value=\"3\" v-model=\"fruits\"&gt;포도,&lt;input type=\"checkbox\" value=\"4\" v-model=\"fruits\"&gt;수박,&lt;input type=\"checkbox\" value=\"5\" v-model=\"fruits\"&gt;참외선택한 과일들 : &lt;span v-html=\"fruits\"&gt;&lt;/span&gt;var model = &#123; fruits : []&#125; v-show 예시,v-if 예시 v-show, v-if는 Vue 객체의 data 속성 값에 따라 렌더링 여부를 결정하는 기능입니다. 둘의 차이점은 v-show는 일단 HTML 요소를 렌더링한 후에 display 속성으로 화면단을 제어합니다. v-if 디렉티브는 조건에 부합되지 않으면 렌더링을 하지 않습니다. 자주 화면이 변경되는 부분에 대해서는 v-show 디렉티브를 사용하는 것이 바람직합니다. 12345678// v-show&lt;input type=\"text\" v-model=\"amount\" /&gt;&lt;img v-show=\"amount &lt; 0\" /&gt;// v-if&lt;input type=\"text\" v-model=\"balance\" /&gt;&lt;span v-if=\"balance &gt;= 1000000\"&gt;Gold&lt;/span&gt;&lt;span v-else-if=\"balance &gt;= 500000\"&gt;Silver&lt;/span&gt; v-for 예시, 예시 반복적인 데이터 렌더링을 하기 위해 v-for 디렉티브를 사용합니다. 예시코드를 확인하면 model에서 contacts 배열을 가져와 화면에 보여주고 있습니다. 123456&lt;tr v-for=\"(contact, index) in contacts\"&gt; &lt;td&gt;&#123;&#123;index+1&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;contact.name&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;contact.tel&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;contact.address&#125;&#125;&lt;/td&gt;&lt;/tr&gt; 객체인 경우는 키를 이용해 값에 접근합니다. 1&lt;option v-for=\"(val, key, index) in regions\" v-bind:value=\"key\"&gt;&#123;&#123; index+1 &#125;&#125; : &#123;&#123;val&#125;&#125;&lt;/option&gt; 기타 디렉티브 및 계산형 속성v-pre 예시,v-once 예시 v-pre 디렉티브는 HTML 요소에 대한 컴파일을 수행하지 않습니다. v-once 디렉티브는 HTML 요소를 단 한 번만 렌더링하기 때문에 데이터를 변경하더라도 다시 렌더링되지 않습니다. 계산형 예시 연산 로직이 필요할 경우 계산형 속성(Computed Property)를 사용해하여 필요한 함수를 등록할 수 있습니다. 함수 안에서 this는 Vue 객체 자신을 참조합니다. num 값이 문자열로 다루어지기 때문에 Number(), parseInt() 함수를 사용해서 명시적으로 숫자로 변환해주어야 합니다. 1234567computed : &#123; sum : function() &#123; var n = Number(this.num); if (Number.isNaN(n) || n &lt; 1) return 0; return ((1+n) * n) / 2; &#125;&#125; Vue.js도 리액트 처럼 렌더링 속도 향상을 위해 가상DOM을 사용합니다. 가상 DOM에 대한 간단한 영상 Vue 인스턴스el, data, computed Vue 인스턴스에는 el, data, computed 옵션이 있습니다. 먼저 data 옵션에 주어진 모든 속성들은 Vue 인스턴스 내부에서 직접 이용되지 않고 Vue 인스턴스와 Data 옵션에 주어진 객체 사이에 프록시를 두어 처리합니다. 그래서 값에 접근할 때 vm.name으로 가능합니다. 직접 data에 접근하려면 vm.$data.name 방법이 있습니다. 1234567var model = &#123; name : \"Ryan\"&#125;var vm = new Vue(&#123; el : '#test', data : model&#125;) el 옵션은 Vue 인스턴스에 연결할 HTML DOM요소를 지정하며 여러개 요소에 지정할 수 없습니다. Computed 옵션에 지정한 것은 함수였지만 Vue 인스턴스는 프록시 처리하여 마치 속성처럼 취급합니다. 메서드 Vue 인스턴스에서 사용할 메서드를 등록하는 옵션입니다. 직접호출, 디렉티브 포현식, 콧수염 표현식에서도 사용할 수 있습니다. 계산형 속성과 차이가 있다면 결과값의 캐싱 여부입니다. 메서드는 캐싱없이 매번 실행합니다. 12345678910&lt;span&gt;&#123;&#123;sum()&#125;&#125;&lt;/span&gt;..methods : &#123; sum : function() &#123; var n = Number(this.num); if (Number.isNaN(n) || n &lt; 1) return 0; return ((1+n)*n)/2; &#125;&#125; 관찰속성 관찰속성은 긴 처리 시간이 필요한 비동기 처리에 적합하다는 특징을 가지고 있습니다. 컴포넌트 심화전역 컴포넌트 12345678910111213141516171819202122// HTML&lt;div id=\"example\"&gt; &lt;my-component&gt;&lt;/my-component&gt;&lt;/div&gt;..// JS// 등록Vue.component('my-component', &#123; template: '&lt;div&gt;사용자 정의 컴포넌트 입니다!&lt;/div&gt;'&#125;)// 루트 인스턴스 생성new Vue(&#123; el: '#example'&#125;)..// 랜더링 결과&lt;div id=\"example\"&gt; &lt;div&gt;사용자 정의 컴포넌트 입니다!&lt;/div&gt;&lt;/div&gt; 단일 컴포넌트와 전역 컴포넌트의 차이점 &#60;template&#62; 에는 id 특성을 부여하지 않음 &#60;script&#62; 영역에서는 Vue 컴포넌트의 template을 지정하지 않음 Vue.component()로 이름과 template 속성을 지정하지 않음 단일 컴포넌트는 name 속성을 지정해 반드시 객체를 export 해야함 컴포넌트에서 사용할 스타일은 &#60;style&#62; 내부에 작성 전역 수준 컴포넌트의 문제점 빌드 단계가 없으므로 최신 자바스크립트 문법을 사용할 수 없습니다. CSS 스타일을 빌드하고 모듈화할 수 있는 기능을 제공하지 않습니다. 컴포넌트 템플릿 작성시 HTML 파일안에 여러개의 &#60;template &#47;&#62; 태그가 작성되어야 하기 때문에 식별이 어렵습니다. Vue-CLI가 제공하는 프로젝트 템플릿 중 webpack-simple에 포함되어 있는 vue-loader라는 구성 요소가 단일 파일 컴포넌트를 지원합니다. 확장자가 .vue인 파일에 &#60;template &#47;&#62;, &#60;script &#47;&#62;, &#60;style &#47;&#62; 을 작성하면 vue-loader는 이 파일을 파싱하고 다른 로더들을 활용해 하나의 모듈로 조합합니다. 특히, css-loader를 이용해 CSS 스타일을 전처리할 수 있으며, 스타일 정보를 모듈화할 수도 있습니다. App.vue 파일을 열어보면 &#60;template &#47;&#62;, &#60;script &#47;&#62;, &#60;style &#47;&#62; 3개의 기본 영역을 확인할 수 있습니다. App.vue 컴포넌트를 화면에 담기 위해 main.js를 사용합니다. 1234567import Vue from 'vue'import TodoList from './components/TodoList.vue'new Vue(&#123; el: '#app', render: h =&gt; h(TodoList)&#125;) App.vue를 비롯한 .js 파일들은 트랜스파일되고, 번들링되어 ./dist/build.js 파일을 생성하여 최종적으로 index.html 파일에 보여집니다. 1234567891011&lt;!DOCTYPE html&gt;&lt;html lang=\"ko\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;todolistapp&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"app\"&gt;&lt;/div&gt; &lt;script src=\"/dist/build.js\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 본격적으로, 예제로 살펴볼 todolistapp 디렉토리와 파일구조는 다음과 같습니다. 12345678src ㄴcomponents ㄴEventBus.vue ㄴInputTodo.vue ㄴList.vue ㄴTodoList.vue ㄴmain.jsindex.html 1.EventBus.vue 12345&lt;script type=\"text/javascript\"&gt; import Vue from 'vue'; var eventBus = new Vue(); // 이벤트버스 생성 export default eventBus;&lt;/script&gt; 2.InputTodo.vue 12345678910111213141516171819202122232425&lt;style&gt;...&lt;/style&gt;&lt;template&gt; &lt;div&gt; &lt;input class=\"input\" type=\"text\" id=\"task\" v-model.trim=\"todo\" placeholder=\"입력 후 엔터!\" v-on:keyup.enter=\"addTodo\"&gt; &lt;span class=\"addbutton\" v-on:click=\"addTodo\"&gt;추 가&lt;/span&gt; &lt;/div&gt; &lt;/template&gt;&lt;script type=\"text/javascript\"&gt; import eventBus from './EventBus.vue' // Import 이벤트 버스 export default &#123; name : 'input-todo', data : function() &#123; return &#123; todo : \"\" &#125; &#125;, methods : &#123; addTodo : function() &#123; eventBus.$emit('add-todo', this.todo); // 이벤트 발행 this.todo = \"\"; &#125; &#125; &#125;&lt;/script&gt; input을 통하여 자동으로 trim 된 값이(v-model.trim=”todo”) data로 전달됩니다. 엔터 또는 버튼을 누르면 addTodo가 실행되고, this.todo의 값을 포함한 ‘add-todo’ 이벤트를 등록합니다. 3.List.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;style&gt;...&lt;/style&gt;&lt;template&gt; &lt;ul id=\"todolist\"&gt; &lt;li v-for=\"(a, index) in todolist\" v-bind:class=\"checked(a.done)\" v-on:click=\"doneToggle(index)\"&gt; &lt;span&gt;&#123;&#123; a.todo &#125;&#125;&lt;/span&gt; &lt;span v-if=\"a.done\"&gt; (완료)&lt;/span&gt; &lt;span class=\"close\" v-on:click.stop=\"deleteTodo(index)\"&gt;&amp;#x00D7;&lt;/span&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/template&gt;&lt;script type=\"text/javascript\"&gt; import eventBus from './EventBus.vue' export default &#123; created : function() &#123; eventBus.$on('add-todo', this.addTodo); // 이벤트 구독 &#125;, data : function() &#123; return &#123; todolist : [ &#123; todo : \"영화보기\", done:false &#125;, &#123; todo : \"주말 산책\", done:true &#125;, &#123; todo : \"ES6 학습\", done:false &#125;, &#123; todo : \"잠실 야구장\", done:false &#125;, ] &#125; &#125;, methods : &#123; checked : function(done) &#123; if(done) return &#123; checked:true &#125;; else return &#123; checked:false &#125;; &#125;, addTodo : function(todo) &#123; if (todo !== \"\") &#123; this.todolist.push(&#123; todo : todo, done:false &#125;); &#125; &#125;, doneToggle : function(index) &#123; this.todolist[index].done = !this.todolist[index].done; &#125;, deleteTodo : function(index) &#123; this.todolist.splice(index,1); &#125; &#125; &#125;&lt;/script&gt; eventBus.$on을 통하여 ‘add-todo’ 이벤트를 받아 this.addTodo를 실행합니다. 전달된 todo값의 유무를 확인 후 true이면 todolist 배열에 넘어온 값을 추가 합니다. EventBus.$off()를 사용하면 이벤트를 제거할 수 있습니다. 4.TodoList.vue 123456789101112131415161718&lt;style&gt;...&lt;/style&gt;&lt;template&gt; &lt;div id=\"todolistapp\"&gt; &lt;div id=\"header\" class=\"header\"&gt; &lt;h2&gt;Todo List App&lt;/h2&gt; &lt;input-todo&gt;&lt;input-todo /&gt; &lt;/div&gt; &lt;list&gt;&lt;/list&gt; &lt;/div&gt; &lt;/template&gt;&lt;script type=\"text/javascript\"&gt; import InputTodo from './InputTodo.vue'; import List from './List.vue'; export default &#123; name : 'todo-list', components : &#123; InputTodo, List &#125; &#125;&lt;/script&gt; 스타일 적용 기존에는 스타일 태그를 이용한 전역 스타일을 적용하였습니다. 만약, 다른 컴포넌트에서도 동일한 CSS 클래스명을 사용한다면 충돌이 발생합니다. 특정 컴포넌트의 스타일을 지정하려면 범위CSS와 모듈CSS 두 가지 방법이 있습니다. 1.범위CSS 1234567src ㄴcomponents ㄴChild1.vue ㄴChild11.vue ㄴChild2.vue ㄴmain.jsindex.html Child1.vue, Child2.vue에는 모두 main 클래스의 스타일이 적용되어 있습니다. 이럴경우, 두 스타일이 충돌되면서 마지막에 선언된 스타일이 적용됩니다. 이때, 스타일 태그에 scoped를 추가하면 이를 해결할 수 있습니다. 범위 CSS를 적용하면 data-v-xxxxx 형태의 속성이 부여됩니다. 123&lt;style scoped&gt;.main&#123;border:1px solid #000;background-color:aqua&#125;&lt;/style&gt; 주의점 특성 선택자(attribute selector)를 사용하기 때문에 브라우저에서 스타일 적용 속도가 느립니다. 그렇기 대문에 속도가 빠른 ID, 클래스, 태그명 선택자로 요소를 선택해 스타일을 적용해야 합니다. 부모 컴포넌트에 적용된 범위CSS는 하위 컴포넌트에도 반영이 됩니다. 2.CSS모듈 CSS모듈은 CSS를 객체처럼 다루는 것을 의미합니다. 설정하는 방법은 간단합니다. 스타일 태그에 module을 추가하면 CSS 모듈 모드가 작동되면서 그 결과로 생성된 클래스 식별 객체는 $style이름으로 컴포넌트의 계산형 속성으로 추가됩니다. 이 스타일은 Vue 인스턴스 내에서 $style 이라는 계산형 속성을 통해서 이용할 수 있습니다. 123456&lt;button :class=\"$style.hand\"&gt; CSS Module을 적용한 버튼&lt;/button&gt;..&lt;style module&gt;.hand&#123;cursor:pointer;background-color:purple;color:yellow&#125;&lt;/style&gt; 적용해야 할 클래스가 여러개일 경우 배열 문법을 이용하며, 자바스크립트에서 접근이 가능합니다. 12345678&lt;div v-bind:class\"[$style.box, $style.border]\"&gt;Hello World&lt;/div&gt;..export default &#123; created() &#123; console.log(this.$style); &#125;&#125; 슬롯 기본사용법 슬롯을 이용해 부모 컴포넌트에서 자식 컴포넌트로 HTML 마크업을 전달 할 수 있습니다. 슬롯을 사용하기 위해서 자식 컴포넌트에서는 &#60;slot&#62;&#60;&#47;slot&#62; 태그를 작성하고 부모 컴포넌트에서는 콘텐츠 영역에서 자식 컴포넌트의 &#60;slot&#62;&#60;&#47;slot&#62; 영역에 나타낼 HTML 마크업을 작성하면 됩니다. 12345678// ChildComponent.vue&lt;template&gt; &lt;div&gt; &lt;p&gt;I'm the child component!&lt;/p&gt; &lt;!-- Content from the parent gets rendered here. --&gt; &lt;slot&gt;&lt;/slot&gt; &lt;/div&gt;&lt;/template&gt; 12345678910111213141516171819202122232425// ParentComponent.vue&lt;template&gt; &lt;div&gt; &lt;child-component&gt; &lt;p&gt;I'm injected content from the parent!&lt;/p&gt; &lt;p&gt;I can still bind to data in the parent's scope, like this! &#123;&#123;myVariable&#125;&#125;&lt;/p&gt; &lt;/child-component&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import ChildComponent from './ChildComponent.vue';export default &#123; components: &#123; ChildComponent &#125;, data() &#123; return &#123; myVariable: `I'm just a lonely old variable.` &#125; &#125;&#125;&lt;/script&gt; 자식 컴포넌트에 &#60;slot&#62;&#60;&#47;slot&#62;이 없을경우 부모로부터 전달되는 콘텐츠는 없어집니다. 반대로, 부모에서 어떠한 콘텐츠도 전달하지 않을경우, &#60;slot&#62;&#60;&#47;slot&#62;에 엘리먼트를 추가하면 기본적으로 랜더링 됩니다. 123&lt;slot&gt; &lt;p&gt;Hello from the child!&lt;/p&gt;&lt;/slot&gt; 명명된 슬롯 여러 개의 슬롯을 원하는 위치에 작성할 수 있습니다. 12345678// BurgerComponent.vue&lt;template&gt; &lt;div class=\"burger-component\"&gt; &lt;slot name=\"top-bun\"&gt;&lt;/slot&gt; &lt;slot&gt;&lt;/slot&gt; &lt;slot name=\"bottom-bun\"&gt;&lt;/slot&gt; &lt;/div&gt;&lt;/template&gt; 1234567891011121314151617// SecretRecipeBurger.vue&lt;template&gt; &lt;burger-component&gt; &lt;burger-bun slot=\"top-bun\"&gt; &lt;sesame-seeds&gt;&lt;/sesame-seeds&gt; &lt;mayonaise&gt;&lt;/mayonaise&gt; &lt;/burger-bun&gt; &lt;burger-bun slot=\"bottom-bun\" :toasted=\"true\"&gt; &lt;secret-sauce&gt;&lt;/secret-sauce&gt; &lt;/burger-bun&gt; &lt;pickles&gt;&lt;/pickles&gt; &lt;lettuce&gt;&lt;/lettuce&gt; &lt;bacon&gt;&lt;/bacon&gt; &lt;beef-patty&gt;&lt;/beef-patty&gt; &lt;cheese-slice&gt;&lt;/cheese-slice&gt; &lt;/burger-component&gt;&lt;/template&gt; 범위 슬롯 범위 슬롯은 활용도가 높지는 않지만, 자식 컴포넌트에서 슬롯에 프로퍼티값을 전달하고 이것을 부모 컴포넌트에서 접근할 때 사용됩니다. 123456789101112131415161718192021222324252627282930313233343536373839404142434445// 자식 컴포넌트&lt;template&gt; &lt;div&gt; &lt;p&gt;Look, there's a slot below me!&lt;/p&gt; &lt;slot :text=\"defaultSlotText\"&gt;&lt;/slot&gt; &lt;slot name=\"literally-the-best\" :text=\"namedSlotText\"&gt;&lt;/slot&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data() &#123; return &#123; defaultSlotText: \"I'll get rendered inside the default slot.\", namedSlotText: \"I'll get rendered inside the *best* slot.\" &#125; &#125;&#125;&lt;/script&gt;// 부모 컴포넌트&lt;template&gt; &lt;div&gt; &lt;child-component&gt; &lt;template scope=\"defaultSlotScope\"&gt; &lt;p&gt;&#123;&#123;defaultSlotScope.text&#125;&#125;&lt;/p&gt; &lt;!-- Renders &lt;p&gt;I'll get rendered inside the default slot.&lt;/p&gt; --&gt; &lt;/template&gt; &lt;template slot=\"literally-the-best\" scope=\"bestSlotScope\"&gt; &lt;p&gt;&#123;&#123;bestSlotScope.text&#125;&#125;&lt;/p&gt; &lt;!-- Renders &lt;p&gt;I'll get rendered inside the *best* slot.&lt;/p&gt; --&gt; &lt;/template&gt; &lt;/child-component&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import ChildComponent from './ChildComponent.vue';export default &#123; components: &#123; ChildComponent &#125;&#125;&lt;/script&gt; 동적 컴포넌트 화면의 동일한 위치에 여러 컴포넌트를 표현할 때 사용합니다. 예를 들어, 페이지의 Home, About, Contact 가 있습니다. &#60;component&#62; 태그와 :is 속성을 사용합니다. 123&lt;template&gt; &lt;component :is=\"dynamicComponent\"&gt;&lt;/component&gt;&lt;/template&gt; 재귀 컴포넌트 재귀 컴포넌트는 템플릿에서 자기 자신을 호출하는 컴포넌트 입니다. 12345678910111213141516171819202122232425262728293031323334// 자식 컴포넌트&lt;li v-for=\"s in subs\"&gt; // subs 가 undefined 될 때 까지 랜더링을 합니다. &lt;tree :subs=\"s.subs\"&gt;&lt;/tree&gt;&lt;/li&gt;...&lt;script&gt;export default &#123; name : 'tree', props : ['subs']&#125; &lt;/script&gt;// 부모 컴포넌트&lt;template&gt; &lt;tree :subs=\"orgcharts\"&gt;&lt;/tree&gt;&lt;/template&gt; ...&lt;script&gt;import Tree from './Tree.vue';export default &#123; name : \"about\", components : &#123; Tree &#125;, data : function() &#123; return &#123; orgcharts : [...] &#125; &#125;&#125;&lt;/script&gt; 참고 https://hackernoon.com/observer-vs-pub-sub-pattern-50d3b27f838c https://github.com/vuejs/vue-loader/blob/master/docs/en/features/css-modules.md https://css-tricks.com/intro-to-vue-2-components-props-slots/ https://alligator.io/vuejs/component-slots/ https://alligator.io/vuejs/scoped-component-slots/","categories":[],"tags":[]},{"title":"[앵귤러] 라이프사이클 이해하기","slug":"Angular-Lifecycle-Hooks","date":"2017-11-15T05:15:26.000Z","updated":"2017-12-20T05:19:49.000Z","comments":true,"path":"2017/11/15/Angular-Lifecycle-Hooks/","link":"","permalink":"https://shlee1353.github.io/2017/11/15/Angular-Lifecycle-Hooks/","excerpt":"","text":"생명주기(life cycle)컴포넌트와 지시자는 생명주기(life cycle) 를 가집니다. 생명주기란, 컴포넌트나 지시자가 생성되고 파괴될 때까지의 일련의 과정을 말합니다. 생명주기 안에서는 특정 시점에 훅 메서드(hook method)를 호출할 수 있습니다. 예를들어, 컴포넌트와 지시자가 초기화되면 ngOnInit() 훅 메서드가 호출됩니다. 만약 이 시점에 실행할 내용이 있다면 컴포넌트 클래스 내에서 ngOnInit() 훅 메서드를 선언하면 됩니다.123export class MyComponent &#123; ngOnInit() &#123; ... &#125;&#125; 생명주기 시퀀스훅 메서드는 호출될 때 일정한 순서로 호출됩니다. 이처럼 일정한 순서로 호출되는 과정을 생명주기 시퀀스(lifecycle sequence) 라고 합니다. 아래와 같은 순서로 이루어집니다. 생명주기 시퀀스는 초기화 시점, 상태 체크 시점, 이벤트 시점으로 다시 나뉩니다. ngOnChanges ngOnInit ngDoCheck ngAfterContentInit ngAfterContentChecked ngAfterViewInit ngAfterViewChecked ngOnDestroy 초기화 ngOnInit() : 컴포넌트나 지시자가 생성될 때 호출되는 메서드. 생명주기의 초기화 시점입니다. ngAfterContentInit() : 외부 콘텐츠가 컴포넌트 뷰로 들어갔을 때 호출 ngAfterViewInit() : 컴포넌트 뷰와 자식 뷰가 초기화되고 나서 호출 상태체크 ngDoCheck() 메서드가 호출되고 나서 ngAfterViewChecked() 가 호출되기까지 콘텐츠와 뷰에 대한 상태 점검이 진행되는 때를 말합니다. 콘텐츠 : 컴포넌트가 선언될 때 내부 엘리먼트에 선언한 엘리먼트의 속성값을 말합니다. 123&lt;parent [prop]=\"..\"&gt; &lt;child name=\"\"&gt;&lt;/child&gt; // 콘텐츠&lt;/parent&gt; Content projection(transclusion) : 컴포넌트 외부에서 HTML을 가져와 컴포넌트 내부에 원하는 위치에 추가함. Content projection을 의도하지 않았다면 콘텐츠를 컴포넌트 사이에 절대 넣지 마세요. 12345678910// AfterContentParentComponent`&lt;after-content&gt; &lt;my-child&gt;&lt;/my-child&gt; &lt;/after-content&gt;`// AfterContentComponenttemplate: ` &lt;div&gt;-- projected content begins --&lt;/div&gt; &lt;ng-content&gt;&lt;/ng-content&gt; &lt;div&gt;-- projected content ends --&lt;/div&gt;` 뷰 : 컴포넌트 내부 탬플릿에 선언한 지시자의 상태 123456@Component(&#123; selector: 'parent', template:` &lt;my-click id=\"1\" *ngIf=\"status\"&gt;&lt;/my-click&gt; // 지시자 &lt;my-click id=\"2\" *ngIf=\"status\"&gt;&lt;/my-click&gt;`&#125;) 이벤트 시점 컴포넌트가 초기화될 때는 ngOnInit() 메서드가 먼저 호출되지만 컴포넌트나 지시자에서 속성 바인딩에 의한 이벤트가 발생하면 ngOnChanges() 가 호출되고 나서 ngOnInit() 이 호출됩니다. ngOnChanges() 메서드는 현재 상태값(currentValue)과 이전 상태값(previousValue)을 확인할 수 있는 SimpleChanges 객체를 받습니다. 12345// SimpleChanges 사용법import &#123;Component, OnChanges, SimpleChanges &#125; from '@angular/core';ngOnChanges(changes: SimpleChanges) &#123; changes.prop&#125; ngOnDestroy()는 컴포넌트나 지시자를 제거할 때 실행됩니다. 컴포넌트 생명주기12345cmp-lifecycle ㄴ child-cmp.component.ts ㄴ cmp-lifecycle.component.ts ㄴ my-cmp.component.ts ㄴ window.directive.ts 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879// child-cmp.component.tsimport &#123; Component, Input, ContentChild, ViewChild, OnChanges, DoCheck, OnInit, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy &#125; from '@angular/core';import &#123; MyCmp &#125; from './my-cmp.component';import &#123; Window &#125; from './window.directive';@Component(&#123; selector: 'child-cmp', template: `&lt;input type=\"text\" [(ngModel)]=\"message\" placeholder=\"바인딩 있음\"&gt; &lt;input type=\"text\" placeholder=\"바인딩 없음\"&gt; // window 지시자는 ngif 상태에 따라 상태값을 결정 &lt;window id=\"1\" *ngIf=\"shouldShow\"&gt;&lt;/window&gt; &lt;window id=\"2\" *ngIf=\"!shouldShow\"&gt;&lt;/window&gt; &lt;button (click)=\"toggle()\"&gt;View 상태변경&lt;/button&gt;`&#125;)// implements 키워드를 이용해 컴포넌트 클래스에 훅을 구현export class ChildCmp implements OnChanges, DoCheck, OnInit, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy &#123; message: string = \"\"; oldMessage: string = \"\"; constructor() &#123; console.log(\"\\n1-컴포넌트 : constructor()\"); &#125; @Input() set prop(name: string) &#123; console.log(\"@Input prop() 세터 메서드 호출\"); &#125; ngOnChanges() &#123; console.log(\"2--컴포넌트 : ngOnChanges()\"); &#125; ngOnInit() &#123; console.log(\"3---컴포넌트 : ngOnInit()\"); &#125; ngDoCheck() &#123; console.log(\"4----컴포넌트 : ngDoCheck()\"); if (this.message != this.oldMessage) &#123; console.log(\"4----컴포넌트 : ngDoCheck()에서 변화감지\"); this.oldMessage = this.message; &#125; &#125; // @ContentChild 장식자를 이용해 child-cmp의 자식 엘리먼트인 my-cmp 컴포넌트에 선언된 속성값을 받음 @ContentChild(MyCmp) myCmp: MyCmp; oldMyCmpId: any; ngAfterContentInit() &#123; console.log(\"5-----컴포넌트 : ngAfterContentInit()\"); this.oldMyCmpId = this.myCmp.value; &#125; ngAfterContentChecked() &#123; console.log(\"6------컴포넌트 : ngAfterContentChecked()\"); if (this.oldMyCmpId != this.myCmp.value) &#123; console.log(\"6------컴포넌트 : ngAfterContentChecked()에서 변화감지\"); this.oldMyCmpId = this.myCmp.value; &#125; &#125; shouldShow = true; toggle() &#123; this.shouldShow = !this.shouldShow; &#125; // Query for a VIEW child of type `Window` @ViewChild(Window) window; oldWindowId: any; ngAfterViewInit() &#123; // viewChild is set after the view has been initialized console.log(\"7-------컴포넌트 : ngAfterViewInit()\"); this.oldWindowId = this.window.id; &#125; ngAfterViewChecked() &#123; // viewChild is updated after the view has been checked console.log(\"8--------컴포넌트 : ngAfterViewChecked()\"); if (this.oldWindowId != this.window.id) &#123; console.log(\"8--------컴포넌트 : ngAfterViewChecked()에서 변화감지\"); this.oldWindowId = this.window.id; &#125; &#125; ngOnDestroy() &#123; console.log(\"9---------컴포넌트 : ngOnDestroy()\"); &#125;&#125; 12345678910// my-cmp.component.tsimport &#123; Component, Input &#125; from '@angular/core';@Component(&#123; selector: 'my-cmp', template: ``&#125;)export class MyCmp &#123; @Input() value: string;&#125; 1234567891011121314151617181920// cmp-lifecycle.component.ts// cmp-lifecycle은 my-cmp 컴포넌트를 콘텐츠로 가진다import &#123; Component &#125; from '@angular/core';@Component(&#123; selector: 'cmp-lifecycle', template: ` &lt;button (click)=\"toggle()\"&gt;Content 상태변경&lt;/button&gt; &lt;button (click)=\"isShow=!isShow\"&gt;&#123;&#123;isShow==false?'컴포넌트 추가':'컴포넌트 삭제'&#125;&#125;&lt;/button&gt; &lt;br&gt; &lt;child-cmp *ngIf=\"isShow\" [prop]=\"shouldShow\"&gt; &lt;my-cmp value=\"&#123;&#123;shouldShow&#125;&#125;\"&gt;&lt;/my-cmp&gt; &lt;/child-cmp&gt;`&#125;)export class CmpLifecycleComponent &#123; isShow: boolean = false; shouldShow = true; toggle() &#123; this.shouldShow = !this.shouldShow; &#125;&#125; 콘텐츠 훅 vs. 뷰 훅콘텐츠 훅과 뷰 훅은 매우 유사하지만 분명한 차이점이 있습니다. AfterContent 훅은 ContentChildren 을 고려합니다 (컴포넌트 안으로 투영된 자식 컴포넌트) AfterView 훅은 ViewChildren 을 고려합니다 (자식 컴포넌트로 컴포넌트 템플릿 안에 엘리먼트 태그로 존재함) 컴포넌트 생명주기 (콘텐츠 훅) 초기값을 확인해보면 shouldShow = true, isShow = false 입니다. Content 상태변경 클릭시, shouldShow = true, false 전환되지만, 외부 뷰의 표시를 결정하지 않기 때문에 훅 메서드를 호출하지 않습니다. 컴포넌트 추가 를 클릭하면, isShow가 true값으로 변하면서 child-cmp가 화면에 그려지기 때문에 초기 출력 로그를 확인할 수 있습니다. 컴포넌트 시퀀스 생명주기가 나타나고 (1)-(8), child-cmp 컴포넌트 내부에 ngModel 바인딩이 일어나 (4)-(8) 훅에 대한 로그 결과 출력. (4)~(8) 로그가 출력된 이유는 child-cmp 컴포넌트 내부에 ngModel 바인딩이 일어났기 때문입니다. 현재까지의 상태값을 확인해보면, shouldShow = true, isShow = true, this.oldMyCmpId = true, this.myCmp.value = true 입니다. 이제 다시 Content 상태변경 을 클릭하면 아래와같은 출력 로그를 확인할 수 있습니다. 123456@Input prop() 세터 메서드 호출2--컴포넌트 : ngOnChanges()4----컴포넌트 : ngDoCheck()6------컴포넌트 : ngAfterContentChecked()6------컴포넌트 : ngAfterContentChecked()에서 변화감지8--------컴포넌트 : ngAfterViewChecked() Content 상태변경 을 클릭할 때 shouldShow 값이 바뀌면서 속성바인딩 [prop]=”shouldShow” 의 상태가 변경되면서 이를 @Input() set prop(name: string) {…} 에서 받은 뒤 ngOnChanges() 호출 child-cmp 엘리먼트의 [prop] 상태가 변경되었기 때문에 상태점검을 히기위해 ngDoCheck() 호출 my-cmp 엘리먼트의 속성값이 바뀐걸 확인하기 위해, 이전값과 새로운값을 비교한뒤 “ngAfterContentChecked()에서 감지변화” 호출. 이때 my-cmp의 속성값은 @ContentChild(MyCmp) myCmp: MyCmp; 로 받아옵니다. 컴포넌트 생명주기 (뷰 훅) [(ngModel)]=”message”로 바인딩 되어있는 input에 텍스트를 추가하면 this.oldMessage, this.message 를 비교하여 “ngDoCheck()에서 변화감지” 를 출력 바인딩이없는 input에 입력시 아무런 호출도 일어나지 않습니다. View 상태변경 클릭시 this.shouldShow 상태값 변경되면서 @ViewChild 장식자를 통해 window 지시자에서 가져오는 id값이 달라집니다. 이전 값과 현재 값이 달라져서 “ngAfterViewChecked()에서 변화감지” 호출 컴포넌트 삭제 클릭시 ngOnDestroy() 메서드가 호출됩니다. 지시자 생명주기앞서 살펴본 컴포넌트의 생명주기와 크게 다르지 않습니다.12345678910111213141516171819202122232425import &#123; Directive, Input &#125; from '@angular/core';@Directive(&#123; selector: '[my-click]', host: &#123; '(click)': 'onClick()' &#125;&#125;)export class MyClickDirective&#123; _prop: string = ''; @Input() set prop(name: string) &#123; this._prop = name || ''; console.log(\"@Input prop() 세터 메서드 호출\"); &#125; onClick() &#123; console.log(\"지시자 : onClick() 메서드 호출\"); &#125; constructor() &#123; console.log(\"1-지시자 : constructor()\"); &#125; ngOnChanges() &#123; console.log(\"2--지시자 : ngOnChanges()\"); &#125; ngOnInit() &#123; console.log(\"3---지시자 : ngOnInit()\"); &#125; ngDoCheck() &#123; console.log(\"4----지시자 : ngDoCheck()\"); &#125; ngAfterContentInit() &#123; console.log(\"5-----지시자 : ngAfterContentInit()\"); &#125; ngAfterContentChecked() &#123; console.log(\"6------지시자 : ngAfterContentChecked()\"); &#125; ngAfterViewInit() &#123; console.log(\"7-------지시자 : ngAfterViewInit()\"); &#125; ngAfterViewChecked() &#123; console.log(\"8--------지시자 : ngAfterViewChecked()\"); &#125; ngOnDestroy() &#123; console.log(\"9---------지시자 : ngOnDestroy()\"); &#125;&#125; 지시자 추가 를 클릭하면 my-click 지시자가 호출됩니다. prop 속성 바인딩을 통해 자신의 상태를 변경하기 때문에 세터 메서드와 ngOnChanges() 훅이 호출되었습니다. 지시자 내부에서 컴포넌트 전용 훅이 호출되지만, 지시자 생명주기로는 사용하지 않습니다. 아래 4가지 공통 훅을 사용합니다. 1234ngOnChanges(...)ngOnInit(...)ngDoCheck(...)ngOnDestroy(...) 상태변경 을 클릭하면 my-click 지시자의 prop 속성값이 변하면서 지시자 내부에서는 상태변경과 검사를 위한 훅 메서드가 호출됩니다. my-click 지시자 를 클릭하면 onClick() 메서드가 호출 되면서 상태 점검 ngDoCheck() 이 뒤이어 호출됩니다. Angular vs. React Angular React constructor constructor() ngOnChanges componentWillMount() ngOnInut render() ngDoCheck componentDidMount() ngAfterContentInit componentWillReceiveProps() ngAfterContentChecked shouldComponentUpdate() ngAfterViewInit componentWillUpdate() ngAfterViewChecked render() ngOnDestory componentDidUpdate() componentWillUnmount()","categories":[],"tags":[]},{"title":"[노드js] Express 서버 시작하기","slug":"Node-Express-Server","date":"2017-11-15T05:12:33.000Z","updated":"2017-11-29T02:50:47.000Z","comments":true,"path":"2017/11/15/Node-Express-Server/","link":"","permalink":"https://shlee1353.github.io/2017/11/15/Node-Express-Server/","excerpt":"","text":"Express is a minimal and flexible Node.js web application framework that provides a robust set of features to develop web and mobile applications. It facilitates the rapid development of Node based Web applications. tutorial sourceAfter cloning this repository, checkout to feature/express-basic Installing Express123456npm init // package.json name : express-tutorialnpm install express --save// npm install express-generator -g// express myproject --ejs 1. 간단한 웹서버 작성1234567891011// basic.server.jsvar express = require('express');var app = express();app.use(function(request, response)&#123; response.send('&lt;h1&gt;hellp express&lt;/h1&gt;');&#125;);app.listen(8080, function()&#123; console.log('web server started');&#125;); 2. 라우팅 HTTP 요청의 메서드와 URL(PATH) 형태에 따라 분기하는 역할 HTTP 메서드로부터 파생12345678910111213141516171819202122232425// route.server.jsvar express = require('express');var app = express();app.get('/a', function(request, response)&#123; response.send('&lt;a href=\"/b\"&gt;Go to B&lt;/a&gt;');&#125;);app.get('/b', function(request, response)&#123; response.send('&lt;a href=\"/a\"&gt;Go to A&lt;/a&gt;');&#125;);// http://localhost:8080/page?name=Ryanapp.get('/page', function(request, response)&#123; response.send('welcome' + request.query.name);&#125;);// http://localhost:8080/page/Ryanapp.get('/page/:name', function(request, response)&#123; response.send('welcome' + request.params.name);&#125;);app.listen(8080, function()&#123; console.log('web server started');&#125;); 3. 미들웨어 http 모듈과 express 모듈의 가장 큰 차이는 미들웨어의 유무 요청에 대한 응답을 완료하기 전까지 요청 중간에서 여러가지 일을 처리 use() 메서드로 미들웨어를 적용 next() 함수를 호출하여 다음 미들웨어로 제어권을 넘김12345678910111213141516171819202122// middleware.server.jsvar express = require('express');var app = express();app.use('/special', function(request, response, next)&#123; console.log('스페셜 미들웨어'); response.send('special middleware');&#125;);app.use(function(request, response, next)&#123; console.log('미들웨어 1'); next();&#125;);app.use(function(request, response, next)&#123; console.log('미들웨어 2'); response.end('middleware 1,2');&#125;);app.listen(8080, function()&#123; console.log('web server started');&#125;); 4. static 미들웨어 express 에서 기본 제공하는 미들웨어 이미지, CSS, JS, HTML 파일과 같은 정적 리소스를 제공할 루트 경로를 지정하는 역할12345678910111213// static.server.jsvar express = require('express');var app = express();// 기본호출app.use(express.static(__dirname + '/static'));//가상경로 지정app.use('/public', express.static(__dirname + '/static'));app.listen(8080, function()&#123; console.log('web server started');&#125;); 5. body-parser 미들웨어 POST 요청시 전달된 데이터를 추출하는 미들웨어 body-parser 미들웨어를 사용하려면 request객체에 body 속성이 부여됨 Postman을 통해 POST 요청 확인 가능함 포스트맨 사용시 Content-Type은 application/x-www-form-urlencode를 사용 (key-value&amp;key=value…의 형태로 전송)1npm install body-parser --save 12345678910// static.server.js...var bodyParser = require('body-parser');app.use(bodyParser.urlencoded(&#123;extended: false&#125;));app.post('/post', function(request, response)&#123; response.send(\"POST Data:\" + request.body.content);&#125;);... 6. 템플릿 엔진1npm install ejs --save 12345678910// index.ejs&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;%=title%&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;&lt;%=message%&gt;&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 12345678910111213// template.jsvar express = require('express');var app = express();app.set('views', './views');app.set('view engine', 'ejs');app.get('/', function(request, response)&#123; response.render('index', &#123;title: 'Hello', message: 'Express!'&#125;);&#125;);app.listen(8080, function()&#123; console.log('web server started');&#125;); 7. todoapp APIAfter cloning this repository, checkout to feature/express-todoapp7-1. todo.server.js12345678910111213141516171819202122// Express 모듈 추출var express = require('express');// body-parser 미들웨어 추출var bodyParser = require('body-parser');// Express 서버 객체 생성var app = express();// 정적 리소스 경로 지정app.use(express.static(__dirname + '/static'));// body-parser 미들웨어 적용app.use(bodyParser.urlencoded(&#123; extended: false &#125;))// 라우팅app.use('/', require('./todo.router.js'));// 서버 구동app.listen(8080, function()&#123; console.log('web server started');&#125;); To serve static files such as images, CSS files, and JavaScript files, use the express.static built-in middleware function in Express. You can load the files that are in the public directory. Express looks up the files relative to the static directory, so the name of the static directory is not part of the URL. __dirname is the directory name of the current module. It’s safer to use the absolute path of the directory that you want to serve:1234567app.use(express.static('public'))http://localhost:3000/images/kitten.jpghttp://localhost:3000/css/style.csshttp://localhost:3000/js/app.jshttp://localhost:3000/images/bg.pnghttp://localhost:3000/hello.html To use multiple static assets directories, call the express.static middleware function multiple times:12app.use(express.static('public'))app.use(express.static('files')) 7-2. todo.router.js1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768var fs = require('fs');var express = require('express');var router = express.Router();// 데이터를 저장할 디렉토리var dataPath = __dirname + '/data/';// TODO 목록 조회router.get('/todos', function(req, res)&#123; var files = fs.readdirSync(dataPath); // [ '1499652647873.json', '1499652721429.json', '1499652725947.json', '1499652729161.json', '1499652734901.json' ] var todos = []; // [ &#123; id: 1499652647873, content: 'To do list 실습 테스트' &#125;, // &#123; id: 1499652721429, content: '등록 기능 개발' &#125;, // &#123; id: 1499652725947, content: '목록 조회 기능 개발' &#125;, // &#123; id: 1499652729161, content: '삭제 기능 개발' &#125;, // &#123; id: 1499652734901, content: '완성!' &#125; ] files.forEach(function(file)&#123; var jsonData = JSON.parse(fs.readFileSync(dataPath + file, 'utf8')); todos.push(jsonData); &#125;); res.send(&#123; result: 'success', data: todos &#125;);&#125;);// TODO 추가router.post('/todos', function(req, res)&#123; var id = new Date().getTime(); // 1500880894981 var filePath = dataPath + id + '.json'; // .../data/1500880942949.json var jsonData = &#123; id:id, content:req.body.content &#125;; // &#123; id: 1500880894981, content: 'test' &#125; fs.writeFileSync(filePath, JSON.stringify(jsonData), 'utf8'); res.send(&#123; result: 'success', data: jsonData &#125;);&#125;);// TODO 삭제router.delete(/todos\\/(\\d+)/, function(req, res)&#123; // \\d is a digit (a character in the range 0-9), and + means 1 or more times. So, \\d+ is 1 or more digits. try&#123; fs.unlinkSync(dataPath + req.params[0] + '.json'); res.send(&#123; result: 'success' &#125;); &#125;catch(e)&#123; res.send(&#123; result: 'failed', error: e.syscall + ' error' &#125;); &#125;&#125;);module.exports = router; express.Router모듈식 마운팅이 가능한 핸들러를 작성할 수 있음. 라우트를 모듈로 작성하고 미들웨어함수 로드 및 라우팅을 정의한 후 기본앱의 한 경로에 라우터 모듈을 마운트합니다. The Node.js file system module allow you to work with the file system on your computer. To include the File System module, use the require() method: Read Files 123456789101112131415161718192021var fs = require('fs');var express = require('express');var app = express();var dataPath = __dirname;// readFilefs.readFile(dataPath + '/index.html', 'utf8', function (err,data) &#123; if (err) &#123; return console.log(err); &#125; console.log(data);&#125;);// readFileSyncvar contensts = fs.readFileSync(dataPath + '/index.html').toString();console.log(contensts);app.listen(8080, function()&#123; console.log('web server started');&#125;); Create Files 12345678910111213141516171819202122var fs = require('fs');var express = require('express');var app = express();var dataPath = __dirname;var filePath = dataPath + '/data/'// Hello content!Hello content!Hello content!Hello content!fs.appendFile(filePath + 'mynewfile1.txt', 'Hello content!', function (err) &#123; if (err) throw err; console.log('Saved!');&#125;);// Hello content!fs.writeFile(filePath + 'mynewfile2.txt', 'Hello content!', function (err) &#123; if (err) throw err; console.log('Saved!');&#125;);app.listen(8080, function()&#123; console.log('web server started');&#125;); Delete Files 1234567891011var fs = require('fs');var express = require('express');var app = express();var dataPath = __dirname;var filePath = dataPath + '/data/'fs.unlink(filePath + 'mynewfile2.txt', function (err) &#123; if (err) throw err; console.log('File deleted!');&#125;); 7-3. app.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164var todoModel = (function($)&#123; function _api(url, method, data)&#123; var deferred = $.Deferred(); $.ajax(&#123; url: url, method: method, data: data, success: function(res)&#123; if(res.result === 'success')&#123; deferred.resolve(res); &#125;else&#123; deferred.reject(res); &#125; &#125;, error: function(err)&#123; console.warn('API 호출 실패 :', url, err); &#125; &#125;); return deferred.promise(); &#125; return &#123; getTodos : function()&#123; return _api('/todos', 'get'); &#125;, // (9) addTodo : function(content)&#123; return _api('/todos', 'post', &#123;content:content&#125;); &#125;, deleteTodo : function(id)&#123; return _api('/todos/' + id, 'delete'); &#125; &#125;;&#125;)(jQuery);var todoView = (function($)&#123; var self; var $els = &#123;&#125;; var _prependTodo = function(id, content)&#123; var $newTodo = $els.todoItemTemplate.clone(); $newTodo .attr('data-todoid', id) .find('._todoContent') .text(content); $els.todoList.prepend($newTodo); &#125;; // (15) var _onSubmit = function(e)&#123; var content = $els.todoInput.val().trim(); $els.todoInput .val('') .focus(); if(content.length)&#123; $(self).trigger('addTodo', [content]); &#125; e.preventDefault(); &#125;; // (12) var _onClickDeleteBtn = function(e)&#123; var todoId = $(e.currentTarget).closest('._todoItem').attr('data-todoid'); if(confirm('삭제하시겠습니까?'))&#123; $(self).trigger('deleteTodo', [todoId]); &#125; &#125;; return &#123; init : function()&#123; self = this; this.cacheElements(); this.bindEvents(); &#125;, // (3) cacheElements : function()&#123; $els.todoForm = $('._todoInputForm'); $els.todoInput = $('._todoInput'); $els.todoItemTemplate = $('._todoItem').detach(); $els.todoList = $('._todoList'); $els.todoList .empty() .show(); &#125;, // (4), (5) bindEvents : function()&#123; $els.todoForm.on('submit', _onSubmit); $els.todoList.on('click', '._deleteBtn', _onClickDeleteBtn); &#125;, // (6), (11) renderTodos : function(data)&#123; $els.todoList.empty(); $(data).each(function(i, item)&#123; _prependTodo(item.id, item.content); &#125;); &#125;, // (10) deleteTodo : function(id)&#123; $els.todoList.find('._todoItem[data-todoid='+id+']').remove(); &#125;, prependTodo : function(id, content)&#123; _prependTodo(id, content); &#125; &#125;&#125;)(jQuery);var todoController = (function($, model, view)&#123; var self; var _onAddTodo = function(e, content)&#123; model .addTodo(content) .then(function(res)&#123; view.prependTodo(res.data.id, res.data.content); &#125;); &#125;; // (14) var _onDeleteTodo = function(e, id)&#123; model .deleteTodo(id) .then(function(res)&#123; view.deleteTodo(id); &#125;); &#125;; return &#123; init : function()&#123; self = this; view.init(); this.bindEvents(); this.renderTodos(); &#125;, // (2) // 뷰에서 발생한 특정 이벤트에 대해 특정 모델값을 업데이트 한 후 다시 뷰로 전달하는 바인딩 bindEvents : function()&#123; var $view = $(view); $view .on('addTodo', _onAddTodo) .on('deleteTodo', _onDeleteTodo); &#125;, // (7), (13) renderTodos : function()&#123; model .getTodos() .then(function(res)&#123; view.renderTodos(res.data); &#125;); &#125; // (8) &#125;;&#125;)(jQuery, todoModel, todoView).init(); // (1) Initial Setting todoController.init() 실행 view.init(), bindEvents(), renderTodos() 실행 cacheElements(), bindEvents() 실행 The .detach() method is the same as .remove(), except that .detach() keeps all jQuery data associated with the removed elements. This method is useful when removed elements are to be reinserted into the DOM at a later time. Object {todoForm: n.fn.init(1), todoInput: n.fn.init(1), todoItemTemplate: n.fn.init(1), todoList: n.fn.init(1)} bindEvents() 실행 ‘submit’, ‘click’ 이벤트 바인딩 jQuery 메소드를 사용하기 위해 view 객체를 $() 적용후 ‘addTodo’, ‘deleteTodo’ 이벤트 바인딩 mode.getTodos() 실행후 res 값을 받아, view.renderTodos(res.data)로 전달. res는 Object {result: “success”, data: Array(6)} res값은 _api(‘/todos’, ‘get’)를 통해 가져온 데이터 값임. 이때 비동기 프로그래밍을 위해 var deferred = $.Deferred() 를 사용함. $.Deferred()로 deferred 객체를 만들고, 성공했을 때에는 resolve, 실패했을 때에는 reject 메소드를 호출하면 resolve는 done으로, reject는 fail로 연결됨. done이나 fail로 구분하지 않고 한 번에 처리하려면 then 메소드 사용. longAndComplicatedFunction 함수에서 deferred.promise()를 return 해야함. 123456789101112131415161718var longAndComplicatedFunction = function() &#123; var deferred = $.Deferred(); try &#123; // 완료되려면 50초가 걸리는 매우 복잡한 비동기 코드 deferred.resolve('성공'); &#125; catch (err) &#123; deferred.reject(err); &#125; return deferred.promise();&#125;;longAndComplicatedFunction().done(function(message) &#123; console.log(message);&#125;).fail(function(error) &#123; console.log(error);&#125;).always(function() &#123; console.log('완료!');&#125;);console.log('다음 행동'); renderTodos() 실행. 기존에 있던 리스트($els.todoList.empty())를 삭제 후 전달받은 값을 이용해 each 구문실행. ‘data-todoid’ 값과 컨텐츠를 담고있는 아이템을 생성한후 리스트에 추가한다 ($els.todoList.prepend($newTodo)) add item submit 이벤트 발생 후, _onSubmit 함수 실행 input의 값을 content에 담고, 초기화. content 값이 있을 경우 $(self).trigger(‘addTodo’, [content]) 실행. addTodo 는 커스텀 이벤트로 .on 으로 연결된 함수를 실행 1234$( \"#foo\" ).on( \"custom\", function( event, param1, param2 ) &#123; alert( param1 + \"\\n\" + param2 );&#125;);$( \"#foo\").trigger( \"custom\", [ \"Custom\", \"Event\" ] ); $view.on(‘addTodo’, _onAddTodo) 실행. 입력한 내용은 POST data를 통해 Node.js 웹서버로 전달되며, 전달된 값은 fs.writeFileSync()를 통해 시스템에 저장되며, 생성된 id와 content는 클라이언트 쪽으로 반환됩니다. view.prependTodo()의 인자로 전달 되어 _prependTodo()를 실행합니다. 참고 https://zellwk.com/blog/crud-express-mongodb/ https://mlab.com/","categories":[],"tags":[]},{"title":"[자바스크립트] 데이터 관리 object, array","slug":"JS-Data-Management","date":"2017-11-15T05:08:41.000Z","updated":"2017-11-29T07:42:22.000Z","comments":true,"path":"2017/11/15/JS-Data-Management/","link":"","permalink":"https://shlee1353.github.io/2017/11/15/JS-Data-Management/","excerpt":"","text":"JSONJSON is a syntax for storing and exchanging data. JSON is text, and we can convert any JavaScript object into JSON, and send JSON to the server. If you receive data in JSON format, you can convert it into a JavaScript object:12345var myObj = &#123; \"name\":\"John\", \"age\":31, \"city\":\"New York\" &#125;;var myJSON = JSON.stringify(myObj);var myJSON = '&#123; \"name\":\"John\", \"age\":31, \"city\":\"New York\" &#125;';var myObj = JSON.parse(myJSON); For..in loop12345678910111213141516171819202122232425var charactersBooks = &#123; Frodo: \"Lord of the Rings\", Aslan: \"Chronicles of Narnia\",&#125;;var characters = [ ];var title = [ ];// get keyfor (var key in charactersBooks) &#123; if (charactersBooks.hasOwnProperty(key)) &#123; characters.push(key); &#125;&#125;// get valuefor (var key in charactersBooks) &#123; if (charactersBooks.hasOwnProperty(key)) &#123; title.push(charactersBooks[key]); &#125;&#125;// resultconsole.log(characters); // [\"Frodo\", \"Aslan\"]console.log(title); // [\"Lord of the Rings\", \"Chronicles of Narnia\"] charactersBooks 이라는 객체가 있습니다. 이 객체는 주인공과 책 제목을 프로퍼티로 가지고 있습니다. 이제 characters와 title 두 배열에 주인공과 책 제목을 추가 하도록 하겠습니다. 객체의 key와 value값을 가져오는 방법은 매우 다양합니다. 저희가 사용할 방법은 for..in 반복문 입니다. 반복문과 함께 hasOwnProperty도 사용하도록 하겠습니다. 이 메소드는 객체가 특정 프로퍼티를 자기만의 직접적인 프로퍼티로서 소유하고 있는지를 판단하는데 사용됩니다. in 연산과는 다르게, 이 메소드는 객체의 프로토타입 체인을 확인하지 않습니다. (in과 hasOwnProperty 사용법) Merge two arrays12345678910var characters = [\"Frodo\", \"Aslan\"];var title = [\"Lord of the Rings\", \"Chronicles of Narnia\"];Array.prototype.push.apply(characters, title);console.log(characters); // [\"Frodo\", \"Aslan\", \"Lord of the Rings\", \"Chronicles of Narnia\"]var characterList = characters.concat(title);console.log(characterList); // [\"Frodo\", \"Aslan\", \"Lord of the Rings\", \"Chronicles of Narnia\"] 두 배열을 하나의 배열로 만드는 방법 중 하나는 기존에 있던 배열에 새로운 배열을 추가하는 방법이 있습니다. 다른 하나는 두 배열을 합쳐 새로운 배열을 만드는 방법이 있습니다. 기존 배열에 추가를 할 때는Array.prototype.push.apply(thisArg, [argsArray])를 사용합니다. apply() 메소드는 주어진 this값과 arguments로 함수를 호출합니다. arguments에는 배열 또는 유사배열객체가 올 수 있으며 함수를 호출할때 입력된 이자가 담겨져 있습니다. 함수에 전달될 여러 개의 인자를 받는 call()구문과 유사합니다. arguments가 유사배열이기 때문에 push()를 사용할 수가 없어서 Array.prototype에 있는 push()를 불러와야 합니다. 만약, 배열 안에 있는 문자열을 합치려면 +=, join(), concat()을 사용하시면 됩니다. 브라우저 속도 차이가 있기 때문에 필요에 맞게 사용하시면 됩니다. 일반적으로는 += 를 사용하는 것이 성능상 좋다고 합니다. https://www.zerocho.com/category/Javascript/post/57433645a48729787807c3fd Converting a JS object to an array1234567891011121314var charactersBooks = &#123; Frodo: \"Lord of the Rings\", Aslan: \"Chronicles of Narnia\",&#125;;var arrayCharacters = Object.keys(charactersBooks).map(function(key)&#123; return &#123;[key]: charactersBooks[key]&#125;;&#125;)console.log(arrayCharacters); // [Object, Object]var length = Object.keys(arrayCharacters).length;console.log(length); 지금까지 객체의 key값과 value값을 가져와 각각의 빈 배열에 추가하는 방법을 알아봤습니다. 이제는 객체 전체를 배열로 한번에 전환하는 방법을 알아 보도록 하겠습니다. Object.keys().map()을 사용하시면 됩니다. Object.keys() 메소드는 객체의 열거할 수 있는 속성값이 담긴 배열을 리턴합니다. 리턴된 배열은 map()을 통해 조건에 부합하는 새로운 배열을 생성합니다. 이렇게 생선된 배열은 arrayCharacters로 정의된 변수에 저장됩니다. 아래는 map()을 사용해서 객체에 담긴 firstname과 lastname을 가져와 join()을 사용해서 fullname으로 출력하는 방법입니다.123456789101112131415var persons = [ &#123;firstname : \"Malcom\", lastname: \"Reynolds\"&#125;, &#123;firstname : \"Kaylee\", lastname: \"Frye\"&#125;, &#123;firstname : \"Jayne\", lastname: \"Cobb\"&#125;];function getFullName(item, index) &#123; // join() method joins the elements of an array into a string, and returns the string. var fullname = [item.firstname,item.lastname].join(\" \"); return fullname;&#125;function myFunction() &#123; document.getElementById(\"demo\").innerHTML = persons.map(getFullName);&#125; Creating an array of objects1234567891011var journal = [];function addEntry(events, didITurnIntoASquirrel) &#123; journal.push(&#123; events: events, squirrel: didITurnIntoASquirrel &#125;);&#125;addEntry([\"work\", \"touched tree\", \"pizza\", \"running\", \"television\"], false);addEntry([\"work\", \"touched tree\", \"pizza\", \"running\", \"television\"], false); 객체복사하기자바스크립트에서 객체는 일반 문자열, 숫자, 불린과 다르게 복사가 됩니다. 값을 복사하는게 아니라 참조하기 때문입니다. 즉, 하나의 객체를 여러개의 변수가 바라보고 있기 때문에 객체를 수정할 경우 모든 변수에 영향을 줍니다. 이것을 얕은복사라고 합니다. 두 개의 객체를 메모리에 할당하는 것을 깊은복사라고 합니다. 1234// extend 얕은복사var copiedObject = jQuery.extend(&#123;&#125;, originalObject)// extend 깊은복사var copiedObject = jQuery.extend(true, &#123;&#125;, originalObject) 1234var array = ['a', 'b', 'c'];var deep = Array.prototype.slice.call(array);deep[0] = 'd';console.log(array); // ['a', 'b', 'c'] 참고 http://blog.kazikai.net/?p=16 https://www.zerocho.com/category/Javascript/post/5750d384b73ae5152792188d https://hyunseob.github.io/2016/02/08/copy-object-in-javascript/","categories":[],"tags":[]},{"title":"[자바스크립트] 상속 개념과 방법","slug":"JS-Inheritance-in-JavaScript","date":"2017-11-15T01:43:45.000Z","updated":"2017-11-29T02:48:53.000Z","comments":true,"path":"2017/11/15/JS-Inheritance-in-JavaScript/","link":"","permalink":"https://shlee1353.github.io/2017/11/15/JS-Inheritance-in-JavaScript/","excerpt":"","text":"프로토타입(prototype)자바스크립트에는 클래스라는 개념대신 기존의 객체를 복사하여 새로운 객체를 생성하는 프로토타입 언어입니다. 프로토타입은 크게 두 가지로 나뉘어 집니다. 프로토타입 객체를 참조하는 prototype 속성(Prototype Object) 과 객체 멤버인 proto 속성이 참조하는 숨은 링크(Prototype Link) 입니다. 다시말해, proto (숨은링크)는 상위에서 물려받은 객체의 프로토타입에 대한 정보이며 prototype 프로퍼티는 자신을 원형으로 만들어질 새로운 객체들 즉 하위로 물려줄 연결에 대한 속성입니다. 자바스크립트에서 함수가 정의될 때 2가지가 일어납니다. 1. 해당함수에 constructor(생성자) 자격부여. 2. 해당 함수의 prototype object 생성 및 연결. 함수를 생성하면 함수 뿐만 아니라 생성된 함수와 연결되는 Prototype Object도 함께 생겨납니다. 이 객체에 접근하려면 prototype 이라는 속성을 통해 가능합니다. 기본속성으로 constructor와 proto 를 가지고 있습니다. proto 속성은 함수뿐만 아니라 모든 객체가 가지고 있습니다. 객체 생성시 조상이었던 함수의 Prototype Object를 가리킵니다. Prototype Object함수를 정의하면 다른 곳에 생성되는 프로토타입 객체는 자신이 다른 객체의 원형이 되는 객체입니다. 모든 객체는 프로토타입 객체에 접근할 수 있습니다. Prototype Object 는 자기 자신의 분신이며 자신을 원형으로 만들어질 다른 객체가 참조할 프로토타입이 됩니다.1234567891011function Person()&#123;&#125;var joon = new Person(); var jisoo = new Person();Person.prototype.getType = function ()&#123; return \"인간\"; &#125;;console.log(joon.getType()); // 인간 console.log(jisoo.getType()); // 인간 Prototype Link자바스크립트에서 기본 데이터 타입을 제외한 모든 것이 객체입니다. 객체가 만들어지기 위해서는 자신을 만드는 데 사용된 원형인 프로토타입 객체를 이용하여 객체를 만듭니다. 이때 만들어진 객체 안에 proto (비표준) 속성이 자신을 만들어낸 원형을 의미하는 프로토타입 객체를 참조하는 숨겨진 링크가 있습니다. 이 숨겨진 링크를 프로토타입이라고 정의합니다.123function A() &#123;&#125;;var A = new A();console.log(A); 콘솔을 확인해 보면, proto 와 constructor 를 주의 깊게 봐야합니다. 해당 객체의 프로토타입은 A라는 함수 객체이며 이 객체의 생성자 역시 function A() 함수이다. 즉, new 를 사용해 만들어진 객체는 function A()를 자신의 프로토타입으로 사용해서 만들어졌습니다. 상속(Inheritance)123456789101112131415function Person() &#123; this.name = \"annonymous\"; this.sayHello = function() &#123; alert(\"Hello, my name is\" + this.name); &#125;&#125;function Yoda() &#123; var obj = new Person(); obj.name = \"Yoda\"; return obj;&#125;var me = new Yoda();me.sayHello();console.log(me instanceof Yoda); // falseconsole.log(me instanceof Person); // true 초창기 자바스크립트 상속 개념은 2개의 객체가 있을 경우, 하나의 객체에서 다른 객체의 함수 사용을 목적으로한 제한적 상속방법 이였습니다. 예제 코드와 같이 new를 사용해서 obj를 만들고 리턴하는 방법입니다. 하지만, 내부를 살펴보면 me의 인스턴스는 Yoda가 아닌 Person으로 나옵니다. 1234567891011121314var person = &#123; name: \"annoymous\", sayHello: function() &#123; alert(\"Hello, my name is\" + this.name); &#125;&#125;;function Yoda() &#123; this.name = \"Yoda\";&#125;Yoda.prototype = person;var yoda = new Yoda();yoda.sayHello();person.sayHello();console.log(yoda instanceof Yoda); // true 이러한 문제 때문에 function에서 기본적으로 제공하는 prototype을 이용한 방법이 등장 하였습니다. person을 리터럴 방식으로 생성한 뒤 객체형태로 프로퍼티와 메소드를 입력합니다. 이렇게 하면 yoda는 Yoda의 인스턴스로 true값을 반환합니다. 하지만, person이 함수형태가 아니기 때문에, instanceof Person를 이용한 부모객체 확인이 불가능합니다. 자바스크립트에서 함수가 중요한 이유는 프로토타입 속성을 제공하는 유일한 객체이기 때문입니다. 이해를 돕기위해, 앞으로 계속 등장하는 prototype과 constructor에 대해 간단히 알아 보도록 하겠습니다. http://www.nextree.co.kr/p7323/ 123456789101112131415function Car () &#123;&#125;;Car.prototype; // ObjectCar.prototype = &#123; constructor : function() &#123;&#125;, __proto__ : Object&#125;;var audi = new Car();audi = &#123; __proto__ : &#123; constructor : function f () &#123;&#125;, __proto__ : Object &#125;&#125;; Car라는 함수(객체)를 생성한 뒤, 내부를 살펴보면, constructor와_proto_가 있습니다. constructor는 car 함수가 생성될 때 사용된 함수객체를 나타내며, _proto_는 현재 프로토타입에 연결된 부모 객체입니다. 여기에 new를 사용하면, 함수의 prototype을 근간으로하는 신규 객체가 반환됩니다. 자바스크립트의 생성자함수에 대해 좀 더 알아보도록 하겠습니다. 객체(Object)는 Object Literal Notation을 사용해서 생성할 수도 있을 뿐 아니라, Constructor 라는 함수를 이용해서도 생성이 가능합니다. 일반적으로 new Object() 또는 Object Literal Notation을 이용해 생성한 객체들은 모두 자바스크립트 내장 함수인 Object() 라는 객체 생성자(Constructor)함수를 이용해 생성되는 것입니다. 123456789101112131415161718192021222324252627282930313233343536var person1 = &#123; firstName: \"Jason\", lastName: \"Bourne\", age: 25 &#125;;var person2 = new Object();console.log(person1.constructor); //function Object() console.log(person2.constructor); //function Object() console.log(person1.constructor == person2.constructor); //truevar array = [];var number = new Number(3);var bool = new Boolean(true);var str = new String(\"String\");console.log(array.constructor); //function Array()console.log(number.constructor); //function Number()console.log(bool.constructor); //function Boolean()console.log(str.constructor); //function String()function Person(firstName, lastName, age) &#123; this.firstName = firstName; this.lastName = lastName; this.age = age; this.getInfo = function() &#123; return \"Name : \" + firstName + \" \" + lastName + \"\\nAge : \" + age; &#125;&#125;var person1 = new Person(\"Jason\", \"Bourne\", 33);var person2 = new Person(\"Jenny\", \"Laurence\", 18);console.log(person1.constructor); //function Personconsole.log(person2.constructor); //function Person 1234567891011121314function Person() &#123; this.name = \"annoymous\"; this.sayHello = function() &#123; alert(\"Hello, my name is\" + this.name); &#125;&#125; function Yoda() &#123; this.name = \"Yoda\";&#125;Yoda.prototype = new Person();var yoda = new Yoda();yoda.sayHello();console.log(yoda instanceof Yoda); // trueconsole.log(yoda instanceof Person); // true 다시 상속으로 돌아와서, prototype을 new로 생성하여 Yoda.prototype으로 지정하는 방법이 있습니다. 이럴경우, yoda는 Yoda와 Person의 인스턴스로 확인이 가능합니다. 하지만, 여기에도 문제가 있습니다. 실제 생성자는 Yoda임에도 불구하고 내부 constructor은 일치하지 않습니다. 그럼에도 불구하고, instanceof를 확인해보면 둘다 true가 나오는데 이러한 이유는 instanceof는 prototype을 기반으로 작동하기 때문입니다. 12345Object.create = function(o) &#123; function F() &#123;&#125; F.prototype = o; return new F();&#125; Constructor를 제대로 연결하기 위해 Object.create()가 표준으로 등장하였으며, IE9 이상부터 사용이 가능합니다. 이 함수는 prototype을 인자로 받아 기본함수 F의 prototype()으로 설정을 한 뒤 new 명령어를 통해 새로운 객체를 리턴합니다. 1234567891011121314function Person() &#123; this.name = \"annoymous\"; this.sayHello = function() &#123; alert(\"Hello, my name is\" + this.name); &#125;&#125; function Yoda() &#123; Person.call(this); this.name = \"Yoda\";&#125;Yoda.prototype = Object.create(Person.prototype);Yoda.prototype.constructor = Yoda;var yoda = new Yoda();yoda.sayHello(); 우선 Object.create()를 사용하여 Person.prototype을 상속받습니다. 다음으로, constructor를 Yoda 로 재선언 해준 뒤, call()를 사용하여 조상 메소드에 접근이 가능합니다. 결국, 자바스크립트는 상속은 생성자와 프로토타입에 기반을 두고 있습니다. ES6 에서는 클래스를 사용하여 이를 간단히 표현할 수 있습니다. 123456789class Person &#123; constructor (name, age) &#123; this.name = name; this.age = age &#125; printProfile() &#123; console.log(this.name + this.age); &#125;&#125; ES6 문법으로 작성한 위 내용은 결국 아래와 같습니다. 12345678function Person(name, age) &#123; this.name = name; this.age = age;&#125;Person.prototype.printProfile = function() &#123; console.log(this.name + this.age);&#125; ES6에서 클래스 상속 구현은 extends 절과 super 키워드를 사용하여 구현합니다. extends 절은 클래스가 다른 생성자의 정적/비정적 프로퍼티를 상속 가능하게 합니다. super 키워드는 클래스 constructor 메소드에서 부모 생성자를 호출하거나, 클래스 메소드 내부에서 부모 생성자의 정적/비정적 메소드를 참조할 때 사용합니다. 1234567891011121314151617181920212223class Vehicle &#123;constructor (name, type) &#123; this.name = name; this.type = type; &#125; getName () &#123; return this.name; &#125; getType () &#123; return this.type; &#125;&#125;class Car extends Vehicle &#123; constructor (name) &#123; super(name, 'car'); &#125; getName () &#123; return 'It is a car: ' + super.getName(); &#125;&#125;let car = new Car('Tesla');console.log(car.getName()); // It is a car: Teslaconsole.log(car.getType()); // car 상속의 예시를 살펴보면, Vehicle 의 프로퍼티값으로 name과 type이 있으며, getName(), getType() 두 메소드를 가지고 있습니다. Car는 extends와 super()를 사용하여 Vehicle를 상속받아 car라는 인스턴스를 생성하였습니다. 이 과정에서 getName()은 Car 내부에서 다시 정의가 되었습니다. 마지막에 생성된 car는 Vehicle과 Car의 메소드에 접근할 수 있습니다. 자바스크립트 상속과정을 설명하면서 this가 많이 나왔는데요, 이것도 간단히 정리해보도록 하겠습니다.1234function sayHello () &#123; var greeting = 'hello'; &#125; alert(greeting); // undefined 자바스크립트에서 함수는 위와같이 유호범위(scope)를 생성합니다. 현재 코드에서는, 외부에서 접근이 불가능합니다. 컨텍스트(context)는 내부에서 코드가 돌아가는 객체를 의미합니다. 이때, this를 사용해서 컨텍스트를 참조할 수 있습니다.12345678910111213141516171819202122// function 내부 컨텍스트function f () &#123; console.log(this); &#125;; f(); // window(전역객체)를 가리킴// 메소드 내부 컨텍스트var oj = &#123; method : function () &#123; console.log(this); &#125;&#125;;oj.method(); // 메소드를 담은 객체를 가리킴// 메소드 내부에 중첩된 함수의 컨텍스트var oj = &#123; method : function () &#123; function inner () &#123; console.log(this); // window(전역객체)를 가리킴 &#125;&#125;; 참고 https://medium.com/@bluesh55/javascript-prototype-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-f8e67c286b67 http://insanehong.kr/post/javascript-prototype/","categories":[],"tags":[]},{"title":"[리액트] Redux 핵심 개념","slug":"React-Redux-Core-Concept","date":"2017-11-15T01:38:31.000Z","updated":"2017-11-29T01:57:04.000Z","comments":true,"path":"2017/11/15/React-Redux-Core-Concept/","link":"","permalink":"https://shlee1353.github.io/2017/11/15/React-Redux-Core-Concept/","excerpt":"","text":"Redux?Redux is a state management library that lets you connect directly to application state from anywhere in your app. It also allows you manipulate application state from anywhere in your app. But, to work its magic, Redux requires that your app have a single data store. 리덕스는 자바스크립트 앱의 상태를 포함하고 있는 컨테이너입니다. Redux store라고 부릅니다. 애플리케이션의 모든 상태를 불변의 객체 트리에 저장합니다. 리덕스는 createStore(reducer, [initialState], [enhancer]) 명령어를 통해 생성할 수 있습니다. 사실, 리덕스는 React뿐만 아니라, Angular, Ember, Vue.js 에도 사용이 가능합니다. Redux를 React와 사용할 때 가장 쉬운 방법은 React Redux 바인딩 라이브러리를 사용하는 것입니다. 이 라이브러리를 사용하면 리덕스 상태와 액션을 props와 쉽게 연결 할 수 있습니다. Why do we need Redux?You can’t pass a property directly to the component or components that you wish to target. The reason has to do with how React works. React enforces a chain of command where properties have to flow down from a parent component to an immediate child component. (Link)12345678910111213141516171819202122232425262728293031323334353637383940var Display = React.createClass(&#123; render: function() &#123; return( &lt;div&gt; &lt;p&gt;&#123;this.props.color&#125;&lt;/p&gt; &lt;p&gt;&#123;this.props.num&#125;&lt;/p&gt; &lt;p&gt;&#123;this.props.size&#125;&lt;/p&gt; &lt;/div&gt; ); &#125;&#125;); var Label = React.createClass(&#123; render: function() &#123; return ( &lt;Display color=&#123;this.props.color&#125; num=&#123;this.props.num&#125; size=&#123;this.props.size&#125;/&gt; ); &#125;&#125;); var Shirt = React.createClass(&#123; render: function() &#123; return ( &lt;div&gt; &lt;Label color=&#123;this.props.color&#125; num=&#123;this.props.num&#125; size=&#123;this.props.size&#125;/&gt; &lt;/div&gt; ); &#125;&#125;); ReactDOM.render( &lt;div&gt; &lt;Shirt color=&quot;steelblue&quot; num=&quot;3.14&quot; size=&quot;medium&quot;/&gt; &lt;/div&gt;, document.querySelector(&quot;#container&quot;)); Spread Operator1234567891011var items = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]; function printStuff(a, b, c) &#123; console.log(&quot;Printing: &quot; + a + &quot; &quot; + b + &quot; &quot; + c);&#125; // using the spread operatorprintStuff(...items); // without using the spread operatorprintStuff(items[0], items[1], items[2]); 123456789101112131415161718192021222324252627282930313233343536var Display = React.createClass(&#123; render: function() &#123; return( &lt;div&gt; &lt;p&gt;&#123;this.props.color&#125;&lt;/p&gt; &lt;p&gt;&#123;this.props.num&#125;&lt;/p&gt; &lt;p&gt;&#123;this.props.size&#125;&lt;/p&gt; &lt;/div&gt; ); &#125;&#125;); var Label = React.createClass(&#123; render: function() &#123; return ( &lt;Display &#123;...this.props&#125;/&gt; ); &#125;&#125;); var Shirt = React.createClass(&#123; render: function() &#123; return ( &lt;div&gt; &lt;Label &#123;...this.props&#125;/&gt; &lt;/div&gt; ); &#125;&#125;); ReactDOM.render( &lt;div&gt; &lt;Shirt color=&quot;steelblue&quot; num=&quot;3.14&quot; size=&quot;medium&quot;/&gt; &lt;/div&gt;, document.querySelector(&quot;#container&quot;)); It’s not good practice to have all components connect to application state. It is best to have parent/container components connect to state and pass state directly to children. Redux의 4 가지 메서드 store.getState() - 현재 상태 객체 트리를 리턴. store.dispatch(action) - 상태를 바뀌기 위히 액션을 보냄. store.subscribe(listener) - 상태 트리에서 변화를 감지. store.replaceReducer(nextReducer) - 현재 리듀서를 다른 것으로 교체 (advanced). Redux 3가지 원칙 애플리케이션의 state를 위해 단 한개의 store를 사용합니다. 애플리케이션에서 store의 state를 직접 변경할 수 없습니다. state를 변경하기 위해선 무조건 action 이 dispatch 되어야 합니다. action 객체를 처리하는 순수함수를 reducer 라고 부릅니다. reducer는 정보(현재 상태 트리와 액션)를 받아서 어떻게 업데이트 할 지 정의합니다. reducer는 순수함수로 작성되어야 합니다. 즉, 네트워크 및 데이터베이스 접근 불가, 인수 변경 불가. 순수하지않은 API 사용불가 Date.now() Math.random() 카툰 안내서http://bestalign.github.io/2015/10/26/cartoon-intro-to-redux/ 액션 생성자(action creators): 애플리케이션의 상태를 바꾸고 싶다면 항상 액션을 보내야만 하며 유일한 방법입니다. 스토어(store): 상태트리(state tree) 전체를 유지하는 책임을 지며, 액션이 들어왔을 때 어떤 상태변화가 필요한지에 대한일은 reducer에게 위임한다. 리듀셔(the reducers): 스토어는 액션이 어떤 상태 변화를 만드는지 알 필요가 있을 때 리듀서에게 묻는다. 리듀서는 넘겨받은 예전 상태를 변경하지 않고 새로운 복사본을 만든 후 모든 변경사항을 적용한다. 리듀서는 복사되고 업데이트된 상태 객체를 루트 리듀서에게 넘겨주고, 루트 리듀서는 이 객체를 스토어로 보낸다. 똑똑한 컴포넌트: 액션 처리를 책임진다. 자기 자신의 CSS style을 가지지 않는다. 자신의 DOM을 거의 가지고 있지 않는다. 뷰 레이어 바인딩(the view layer binding): 스토어를 뷰에 연결하기 위한 도움장치. 동작방법 스토어를 준비: 루트 컴포넌트는 createStore()를 이용해서 스토어를 생성하고 무슨 리듀서를 사용할지 알려준다. 필요한 모든 리듀서를 combineReducers()를 이용해서 하나로 묶는다. 루트 컴포넌트는 공급 컴포넌트로 서브 컴포넌트를 감싸고 스토어와 공급 컴포넌트 사이를 연결한다. 똑똑한 컴포넌트는 connect()로 네트워크에 연결한다. 이를 통해 상태 업데이트를 받을 수 있게 만든다. 액션콜백 준비: 멍청한 컴포넌트가 액션과 쉽게 일할 수 있게 bindActionCreators()로 액션 콜백을 준비. 데이터흐름 뷰가 액션을 요청한다. (Image) bindActionCreators()가 준비과정에서 사용되었으면 자동으로 액션이 보내진다. 스토어가 액션을 받는다. 현재 애플리케이션 상태 트리와 액션을 루트 리듀서에게 보낸다. 루트 리듀서는 상태 트리를 조각으로 나눈 뒤 알맞은 서브 리듀서로 상태 조각들을 넘겨준다. 서브 리듀서는 받은 상태 조각을 복사한 뒤, 그 복사본을 변경한다. 루트 리듀서에게 변경된 복사본을 돌려준다. 모든 변경된 조각들을 돌려주면, 루트 리듀서는 조각들을 하나로 모아 상태 트리로 만든 뒤 스토어로 돌려준다. 스토어는 새로운 상태 트리를 옛날 상태 트리와 바꾼다. 스토어는 뷰 레이어 바인딩에게 애플리케이션 상태가 변경되었다는 것을 알린다. 뷰 레이어 바인딩은 스토어에게 새로운 상태를 보내달라고 요청한다. 뷰 레이어 바인딩은 뷰에게 화면을 업데이트하도록 요청한다. 프로젝트 준비https://www.youtube.com/watch?v=rNhstoL9MME&amp;list=PL9FpF_z-xR_GMujql3S_XGV2SpdfDBkeC&amp;index=23 폴더구조1234567891011121314src ㄴactions ㄴActionTypes.js ㄴindex.js ㄴcomponents ㄴApp.js ㄴControl.js ㄴCounter.js ㄴValue.js ㄴreducers ㄴcounter.js ㄴindex.js ㄴui.js ㄴindex.js actions리덕스로 보내질 객체를 리턴합니다. 리턴되는 객체는 dispatch 될 때 인자로 전달됩니다.1234//ActionTypes.jsexport const INCREMENT = &quot;INCREMENT&quot;;export const DECREMENT = &quot;DECREMENT&quot;;export const SET_COLOR = &quot;SET_COLOR&quot;; 123456789101112131415161718192021//index.jsimport * as types from &apos;./ActionTypes&apos;;export function increment() &#123; return &#123; type: types.INCREMENT &#125;;&#125;export function decrement() &#123; return &#123; type: types.DECREMENT &#125;;&#125;export function setColor(color) &#123; return &#123; type: types.SET_COLOR, color &#125;;&#125; components123456789101112131415//App.jsimport React, &#123; Component &#125; from &apos;react&apos;;import Counter from &apos;./Counter&apos;;class App extends Component &#123; render() &#123; return( &lt;Counter/&gt; ); &#125;&#125;export default App; 1234567891011121314151617181920212223242526272829303132333435//Control.jsimport React, &#123; Component, PropTypes &#125; from &apos;react&apos;;const propTypes = &#123; onPlus: PropTypes.func, onSubtract: PropTypes.func, onRandomizeColor: PropTypes.func&#125;;function createWarning(funcName) &#123; return () =&gt; console.warn(funcName + &apos; is not defined&apos;);&#125;const defaultProps = &#123; onPlus: createWarning(&apos;onPlus&apos;), onSubtract: createWarning(&apos;onSubtract&apos;), onRandomizeColor: createWarning(&apos;onRandomizeColor&apos;)&#125;;class Control extends Component &#123; render() &#123; return( &lt;div&gt; &lt;button onClick=&#123;this.props.onPlus&#125;&gt;+&lt;/button&gt; &lt;button onClick=&#123;this.props.onSubtract&#125;&gt;-&lt;/button&gt; &lt;button onClick=&#123;this.props.onRandomizeColor&#125;&gt;Randomize Color&lt;/button&gt; &lt;/div&gt; ); &#125;&#125;Control.propTypes = propTypes;Control.defaultProps = defaultProps;export default Control; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566//Counter.jsimport React, &#123; Component &#125; from &apos;react&apos;;import Value from &apos;./Value&apos;;import Control from &apos;./Control&apos;;import &#123; connect &#125; from &apos;react-redux&apos;;// import &#123; connect, bindActionCreators &#125; from &apos;redux&apos;;import * as actions from &apos;../actions&apos;;class Counter extends Component &#123; constructor(props) &#123; super(props); this.setRandomColor = this.setRandomColor.bind(this); &#125; setRandomColor() &#123; const color = [ Math.floor((Math.random()*55) + 200), Math.floor((Math.random()*55) + 200), Math.floor((Math.random()*55) + 200) ]; this.props.handleSetColor(color); &#125; render() &#123; const color = this.props.color; const style = &#123; background: `rgb($&#123;color[0]&#125;, $&#123;color[1]&#125;, $&#123;color[2]&#125;)` &#125;; return( &lt;div style=&#123;style&#125;&gt; &lt;Value number=&#123;this.props.number&#125;/&gt; &lt;Control onPlus=&#123;this.props.handleIncrement&#125; onSubtract=&#123;this.props.handleDecrement&#125; onRandomizeColor=&#123;this.setRandomColor&#125; /&gt; &lt;/div&gt; ); &#125;&#125;const mapStateToProps = (state) =&gt; &#123; return &#123; number: state.counter.number, color: state.ui.color &#125;;&#125;;const mapDispatchToProps = (dispatch) =&gt; &#123; //return bindActionCreators(actions, dispatch); return &#123; handleIncrement: () =&gt; &#123; dispatch(actions.increment())&#125;, handleDecrement: () =&gt; &#123; dispatch(actions.decrement())&#125;, handleSetColor: (color) =&gt; &#123; dispatch(actions.setColor(color))&#125; &#125;;&#125;;// 두 개의 인수를 받으며 리덕스 스토어와 컴포넌트를 연결하는 함수를 반환합니다.export default connect(mapStateToProps, mapDispatchToProps)(Counter); 1234567891011121314151617181920212223242526//Value.jsimport React, &#123; Component, PropTypes &#125; from &apos;react&apos;;const propTypes = &#123; number: PropTypes.number&#125;;const defaultProps = &#123; number: -1&#125;;class Value extends Component &#123; render() &#123; return( &lt;div&gt; &lt;h1&gt;&#123;this.props.number&#125;&lt;/h1&gt; &lt;/div&gt; ); &#125;&#125;Value.propTypes = propTypes;Value.defaultProps = defaultProps;export default Value; reducers1234567891011121314151617181920212223242526272829303132//counter.jsimport * as types from &apos;../actions/ActionTypes&apos;;// 애플리케이션의 초기 상태를 나타냅니다.const initialState = &#123; number: 0, dummy: &apos;dumbdumb&apos;, dumbObject: &#123; d: 0, u: 1, m: 2, b: 3 &#125;&#125;;export default function counter(state = initialState, action) &#123; /* ... */ switch(action.type) &#123; case types.INCREMENT: return &#123; ...state, number: state.number + 1, dumbObject: &#123; ...state.dumbObject, u: 0 &#125; &#125;; case types.DECREMENT: return &#123; ...state, number: state.number - 1 &#125;; default: return state; &#125;&#125; 1234567891011//index.jsimport &#123; combineReducers &#125; from &apos;redux&apos;;import counter from &apos;./counter&apos;;import ui from &apos;./ui&apos;;const reducers = combineReducers(&#123; counter, ui&#125;);export default reducers; 12345678910111213141516//ui.jsimport * as types from &apos;../actions/ActionTypes&apos;;const initialState = &#123; color: [255, 255, 255]&#125;;export default function ui(state = initialState, action) &#123; if(action.type === types.SET_COLOR) &#123; return &#123; color: action.color &#125;; &#125; else &#123; return state; &#125;&#125; index.js123456789101112131415161718192021222324252627import React from &apos;react&apos;;import ReactDOM from &apos;react-dom&apos;;import App from &apos;./components/App&apos;;import &#123; createStore &#125; from &apos;redux&apos;;import reducers from &apos;./reducers&apos;;//Provider 컴포넌트는 React store를 모든 자식 컴포넌트에 제공import &#123; Provider &#125; from &apos;react-redux&apos;;//스토어를 생성하여 상태변화를 감지할 수 있으며 액션을 보낼 수 있음const store = createStore(reducers);console.log(store.getState());store.subscribe(() =&gt; console.log(store.getState()));store.dispatch(actions.increment());store.dispatch(actions.decrement());store.dispatch(actions.setColor([200, 200, 200]));ReactDOM.render( &lt;Provider store=&#123;store&#125;&gt; &lt;App/&gt; &lt;/Provider&gt;, document.getElementById(&apos;root&apos;)); sources https://github.com/shlee1353/phostalgia/tree/demo (advanced example) http://lorenstewart.me/2016/11/27/a-practical-guide-to-redux/ https://www.kirupa.com/react/transferring_properties.htm","categories":[],"tags":[]}]}